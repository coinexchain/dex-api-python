# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200ApplicationVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_tags': 'str',
        'client_name': 'str',
        'commit': 'str',
        'go': 'str',
        'name': 'str',
        'server_name': 'str',
        'version': 'str'
    }

    attribute_map = {
        'build_tags': 'build_tags',
        'client_name': 'client_name',
        'commit': 'commit',
        'go': 'go',
        'name': 'name',
        'server_name': 'server_name',
        'version': 'version'
    }

    def __init__(self, build_tags=None, client_name=None, commit=None, go=None, name=None, server_name=None, version=None):  # noqa: E501
        """InlineResponse200ApplicationVersion - a model defined in Swagger"""  # noqa: E501

        self._build_tags = None
        self._client_name = None
        self._commit = None
        self._go = None
        self._name = None
        self._server_name = None
        self._version = None
        self.discriminator = None

        if build_tags is not None:
            self.build_tags = build_tags
        if client_name is not None:
            self.client_name = client_name
        if commit is not None:
            self.commit = commit
        if go is not None:
            self.go = go
        if name is not None:
            self.name = name
        if server_name is not None:
            self.server_name = server_name
        if version is not None:
            self.version = version

    @property
    def build_tags(self):
        """Gets the build_tags of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The build_tags of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._build_tags

    @build_tags.setter
    def build_tags(self, build_tags):
        """Sets the build_tags of this InlineResponse200ApplicationVersion.


        :param build_tags: The build_tags of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._build_tags = build_tags

    @property
    def client_name(self):
        """Gets the client_name of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The client_name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this InlineResponse200ApplicationVersion.


        :param client_name: The client_name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def commit(self):
        """Gets the commit of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The commit of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this InlineResponse200ApplicationVersion.


        :param commit: The commit of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def go(self):
        """Gets the go of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The go of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._go

    @go.setter
    def go(self, go):
        """Sets the go of this InlineResponse200ApplicationVersion.


        :param go: The go of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._go = go

    @property
    def name(self):
        """Gets the name of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200ApplicationVersion.


        :param name: The name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def server_name(self):
        """Gets the server_name of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The server_name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this InlineResponse200ApplicationVersion.


        :param server_name: The server_name of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def version(self):
        """Gets the version of this InlineResponse200ApplicationVersion.  # noqa: E501


        :return: The version of this InlineResponse200ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200ApplicationVersion.


        :param version: The version of this InlineResponse200ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200ApplicationVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200ApplicationVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
