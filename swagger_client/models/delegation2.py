# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Delegation2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_req': 'BaseReq',
        'delegator_address': 'Address',
        'validator_src_address': 'ValidatorAddress',
        'validator_dst_address': 'ValidatorAddress',
        'amount': 'Coin'
    }

    attribute_map = {
        'base_req': 'base_req',
        'delegator_address': 'delegator_address',
        'validator_src_address': 'validator_src_address',
        'validator_dst_address': 'validator_dst_address',
        'amount': 'amount'
    }

    def __init__(self, base_req=None, delegator_address=None, validator_src_address=None, validator_dst_address=None, amount=None):  # noqa: E501
        """Delegation2 - a model defined in Swagger"""  # noqa: E501

        self._base_req = None
        self._delegator_address = None
        self._validator_src_address = None
        self._validator_dst_address = None
        self._amount = None
        self.discriminator = None

        self.base_req = base_req
        self.delegator_address = delegator_address
        self.validator_src_address = validator_src_address
        self.validator_dst_address = validator_dst_address
        self.amount = amount

    @property
    def base_req(self):
        """Gets the base_req of this Delegation2.  # noqa: E501


        :return: The base_req of this Delegation2.  # noqa: E501
        :rtype: BaseReq
        """
        return self._base_req

    @base_req.setter
    def base_req(self, base_req):
        """Sets the base_req of this Delegation2.


        :param base_req: The base_req of this Delegation2.  # noqa: E501
        :type: BaseReq
        """
        if base_req is None:
            raise ValueError("Invalid value for `base_req`, must not be `None`")  # noqa: E501

        self._base_req = base_req

    @property
    def delegator_address(self):
        """Gets the delegator_address of this Delegation2.  # noqa: E501


        :return: The delegator_address of this Delegation2.  # noqa: E501
        :rtype: Address
        """
        return self._delegator_address

    @delegator_address.setter
    def delegator_address(self, delegator_address):
        """Sets the delegator_address of this Delegation2.


        :param delegator_address: The delegator_address of this Delegation2.  # noqa: E501
        :type: Address
        """
        if delegator_address is None:
            raise ValueError("Invalid value for `delegator_address`, must not be `None`")  # noqa: E501

        self._delegator_address = delegator_address

    @property
    def validator_src_address(self):
        """Gets the validator_src_address of this Delegation2.  # noqa: E501


        :return: The validator_src_address of this Delegation2.  # noqa: E501
        :rtype: ValidatorAddress
        """
        return self._validator_src_address

    @validator_src_address.setter
    def validator_src_address(self, validator_src_address):
        """Sets the validator_src_address of this Delegation2.


        :param validator_src_address: The validator_src_address of this Delegation2.  # noqa: E501
        :type: ValidatorAddress
        """
        if validator_src_address is None:
            raise ValueError("Invalid value for `validator_src_address`, must not be `None`")  # noqa: E501

        self._validator_src_address = validator_src_address

    @property
    def validator_dst_address(self):
        """Gets the validator_dst_address of this Delegation2.  # noqa: E501


        :return: The validator_dst_address of this Delegation2.  # noqa: E501
        :rtype: ValidatorAddress
        """
        return self._validator_dst_address

    @validator_dst_address.setter
    def validator_dst_address(self, validator_dst_address):
        """Sets the validator_dst_address of this Delegation2.


        :param validator_dst_address: The validator_dst_address of this Delegation2.  # noqa: E501
        :type: ValidatorAddress
        """
        if validator_dst_address is None:
            raise ValueError("Invalid value for `validator_dst_address`, must not be `None`")  # noqa: E501

        self._validator_dst_address = validator_dst_address

    @property
    def amount(self):
        """Gets the amount of this Delegation2.  # noqa: E501


        :return: The amount of this Delegation2.  # noqa: E501
        :rtype: Coin
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Delegation2.


        :param amount: The amount of this Delegation2.  # noqa: E501
        :type: Coin
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Delegation2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Delegation2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
