# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LockedCoin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin': 'Coin',
        'unlock_time': 'str',
        'from_address': 'str',
        'supervisor': 'str',
        'reward': 'str'
    }

    attribute_map = {
        'coin': 'coin',
        'unlock_time': 'unlock_time',
        'from_address': 'from_address',
        'supervisor': 'supervisor',
        'reward': 'reward'
    }

    def __init__(self, coin=None, unlock_time=None, from_address=None, supervisor=None, reward=None):  # noqa: E501
        """LockedCoin - a model defined in Swagger"""  # noqa: E501

        self._coin = None
        self._unlock_time = None
        self._from_address = None
        self._supervisor = None
        self._reward = None
        self.discriminator = None

        self.coin = coin
        self.unlock_time = unlock_time
        if from_address is not None:
            self.from_address = from_address
        if supervisor is not None:
            self.supervisor = supervisor
        if reward is not None:
            self.reward = reward

    @property
    def coin(self):
        """Gets the coin of this LockedCoin.  # noqa: E501


        :return: The coin of this LockedCoin.  # noqa: E501
        :rtype: Coin
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this LockedCoin.


        :param coin: The coin of this LockedCoin.  # noqa: E501
        :type: Coin
        """
        if coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def unlock_time(self):
        """Gets the unlock_time of this LockedCoin.  # noqa: E501


        :return: The unlock_time of this LockedCoin.  # noqa: E501
        :rtype: str
        """
        return self._unlock_time

    @unlock_time.setter
    def unlock_time(self, unlock_time):
        """Sets the unlock_time of this LockedCoin.


        :param unlock_time: The unlock_time of this LockedCoin.  # noqa: E501
        :type: str
        """
        if unlock_time is None:
            raise ValueError("Invalid value for `unlock_time`, must not be `None`")  # noqa: E501

        self._unlock_time = unlock_time

    @property
    def from_address(self):
        """Gets the from_address of this LockedCoin.  # noqa: E501


        :return: The from_address of this LockedCoin.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this LockedCoin.


        :param from_address: The from_address of this LockedCoin.  # noqa: E501
        :type: str
        """

        self._from_address = from_address

    @property
    def supervisor(self):
        """Gets the supervisor of this LockedCoin.  # noqa: E501


        :return: The supervisor of this LockedCoin.  # noqa: E501
        :rtype: str
        """
        return self._supervisor

    @supervisor.setter
    def supervisor(self, supervisor):
        """Sets the supervisor of this LockedCoin.


        :param supervisor: The supervisor of this LockedCoin.  # noqa: E501
        :type: str
        """

        self._supervisor = supervisor

    @property
    def reward(self):
        """Gets the reward of this LockedCoin.  # noqa: E501


        :return: The reward of this LockedCoin.  # noqa: E501
        :rtype: str
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this LockedCoin.


        :param reward: The reward of this LockedCoin.  # noqa: E501
        :type: str
        """

        self._reward = reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockedCoin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockedCoin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
