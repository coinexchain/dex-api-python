# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IssueToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_req': 'BaseReq',
        'name': 'str',
        'symbol': 'str',
        'total_supply': 'str',
        'owner': 'Address',
        'mintable': 'bool',
        'burnable': 'bool',
        'addr_forbiddable': 'bool',
        'token_forbiddable': 'bool',
        'url': 'str',
        'description': 'str',
        'identity': 'str'
    }

    attribute_map = {
        'base_req': 'base_req',
        'name': 'name',
        'symbol': 'symbol',
        'total_supply': 'total_supply',
        'owner': 'owner',
        'mintable': 'mintable',
        'burnable': 'burnable',
        'addr_forbiddable': 'addr_forbiddable',
        'token_forbiddable': 'token_forbiddable',
        'url': 'url',
        'description': 'description',
        'identity': 'identity'
    }

    def __init__(self, base_req=None, name=None, symbol=None, total_supply=None, owner=None, mintable=None, burnable=None, addr_forbiddable=None, token_forbiddable=None, url=None, description=None, identity=None):  # noqa: E501
        """IssueToken - a model defined in Swagger"""  # noqa: E501

        self._base_req = None
        self._name = None
        self._symbol = None
        self._total_supply = None
        self._owner = None
        self._mintable = None
        self._burnable = None
        self._addr_forbiddable = None
        self._token_forbiddable = None
        self._url = None
        self._description = None
        self._identity = None
        self.discriminator = None

        self.base_req = base_req
        self.name = name
        self.symbol = symbol
        self.total_supply = total_supply
        if owner is not None:
            self.owner = owner
        self.mintable = mintable
        self.burnable = burnable
        self.addr_forbiddable = addr_forbiddable
        self.token_forbiddable = token_forbiddable
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if identity is not None:
            self.identity = identity

    @property
    def base_req(self):
        """Gets the base_req of this IssueToken.  # noqa: E501


        :return: The base_req of this IssueToken.  # noqa: E501
        :rtype: BaseReq
        """
        return self._base_req

    @base_req.setter
    def base_req(self, base_req):
        """Sets the base_req of this IssueToken.


        :param base_req: The base_req of this IssueToken.  # noqa: E501
        :type: BaseReq
        """
        if base_req is None:
            raise ValueError("Invalid value for `base_req`, must not be `None`")  # noqa: E501

        self._base_req = base_req

    @property
    def name(self):
        """Gets the name of this IssueToken.  # noqa: E501


        :return: The name of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueToken.


        :param name: The name of this IssueToken.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this IssueToken.  # noqa: E501


        :return: The symbol of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IssueToken.


        :param symbol: The symbol of this IssueToken.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def total_supply(self):
        """Gets the total_supply of this IssueToken.  # noqa: E501


        :return: The total_supply of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this IssueToken.


        :param total_supply: The total_supply of this IssueToken.  # noqa: E501
        :type: str
        """
        if total_supply is None:
            raise ValueError("Invalid value for `total_supply`, must not be `None`")  # noqa: E501

        self._total_supply = total_supply

    @property
    def owner(self):
        """Gets the owner of this IssueToken.  # noqa: E501


        :return: The owner of this IssueToken.  # noqa: E501
        :rtype: Address
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IssueToken.


        :param owner: The owner of this IssueToken.  # noqa: E501
        :type: Address
        """

        self._owner = owner

    @property
    def mintable(self):
        """Gets the mintable of this IssueToken.  # noqa: E501


        :return: The mintable of this IssueToken.  # noqa: E501
        :rtype: bool
        """
        return self._mintable

    @mintable.setter
    def mintable(self, mintable):
        """Sets the mintable of this IssueToken.


        :param mintable: The mintable of this IssueToken.  # noqa: E501
        :type: bool
        """
        if mintable is None:
            raise ValueError("Invalid value for `mintable`, must not be `None`")  # noqa: E501

        self._mintable = mintable

    @property
    def burnable(self):
        """Gets the burnable of this IssueToken.  # noqa: E501


        :return: The burnable of this IssueToken.  # noqa: E501
        :rtype: bool
        """
        return self._burnable

    @burnable.setter
    def burnable(self, burnable):
        """Sets the burnable of this IssueToken.


        :param burnable: The burnable of this IssueToken.  # noqa: E501
        :type: bool
        """
        if burnable is None:
            raise ValueError("Invalid value for `burnable`, must not be `None`")  # noqa: E501

        self._burnable = burnable

    @property
    def addr_forbiddable(self):
        """Gets the addr_forbiddable of this IssueToken.  # noqa: E501


        :return: The addr_forbiddable of this IssueToken.  # noqa: E501
        :rtype: bool
        """
        return self._addr_forbiddable

    @addr_forbiddable.setter
    def addr_forbiddable(self, addr_forbiddable):
        """Sets the addr_forbiddable of this IssueToken.


        :param addr_forbiddable: The addr_forbiddable of this IssueToken.  # noqa: E501
        :type: bool
        """
        if addr_forbiddable is None:
            raise ValueError("Invalid value for `addr_forbiddable`, must not be `None`")  # noqa: E501

        self._addr_forbiddable = addr_forbiddable

    @property
    def token_forbiddable(self):
        """Gets the token_forbiddable of this IssueToken.  # noqa: E501


        :return: The token_forbiddable of this IssueToken.  # noqa: E501
        :rtype: bool
        """
        return self._token_forbiddable

    @token_forbiddable.setter
    def token_forbiddable(self, token_forbiddable):
        """Sets the token_forbiddable of this IssueToken.


        :param token_forbiddable: The token_forbiddable of this IssueToken.  # noqa: E501
        :type: bool
        """
        if token_forbiddable is None:
            raise ValueError("Invalid value for `token_forbiddable`, must not be `None`")  # noqa: E501

        self._token_forbiddable = token_forbiddable

    @property
    def url(self):
        """Gets the url of this IssueToken.  # noqa: E501


        :return: The url of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueToken.


        :param url: The url of this IssueToken.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this IssueToken.  # noqa: E501


        :return: The description of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueToken.


        :param description: The description of this IssueToken.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def identity(self):
        """Gets the identity of this IssueToken.  # noqa: E501


        :return: The identity of this IssueToken.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this IssueToken.


        :param identity: The identity of this IssueToken.  # noqa: E501
        :type: str
        """

        self._identity = identity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
