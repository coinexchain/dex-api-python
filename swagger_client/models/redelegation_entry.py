# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RedelegationEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_height': 'int',
        'completion_time': 'str',
        'initial_balance': 'str',
        'shares_dst': 'str',
        'balance': 'str'
    }

    attribute_map = {
        'creation_height': 'creation_height',
        'completion_time': 'completion_time',
        'initial_balance': 'initial_balance',
        'shares_dst': 'shares_dst',
        'balance': 'balance'
    }

    def __init__(self, creation_height=None, completion_time=None, initial_balance=None, shares_dst=None, balance=None):  # noqa: E501
        """RedelegationEntry - a model defined in Swagger"""  # noqa: E501

        self._creation_height = None
        self._completion_time = None
        self._initial_balance = None
        self._shares_dst = None
        self._balance = None
        self.discriminator = None

        self.creation_height = creation_height
        self.completion_time = completion_time
        self.initial_balance = initial_balance
        self.shares_dst = shares_dst
        self.balance = balance

    @property
    def creation_height(self):
        """Gets the creation_height of this RedelegationEntry.  # noqa: E501


        :return: The creation_height of this RedelegationEntry.  # noqa: E501
        :rtype: int
        """
        return self._creation_height

    @creation_height.setter
    def creation_height(self, creation_height):
        """Sets the creation_height of this RedelegationEntry.


        :param creation_height: The creation_height of this RedelegationEntry.  # noqa: E501
        :type: int
        """
        if creation_height is None:
            raise ValueError("Invalid value for `creation_height`, must not be `None`")  # noqa: E501

        self._creation_height = creation_height

    @property
    def completion_time(self):
        """Gets the completion_time of this RedelegationEntry.  # noqa: E501


        :return: The completion_time of this RedelegationEntry.  # noqa: E501
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this RedelegationEntry.


        :param completion_time: The completion_time of this RedelegationEntry.  # noqa: E501
        :type: str
        """
        if completion_time is None:
            raise ValueError("Invalid value for `completion_time`, must not be `None`")  # noqa: E501

        self._completion_time = completion_time

    @property
    def initial_balance(self):
        """Gets the initial_balance of this RedelegationEntry.  # noqa: E501


        :return: The initial_balance of this RedelegationEntry.  # noqa: E501
        :rtype: str
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this RedelegationEntry.


        :param initial_balance: The initial_balance of this RedelegationEntry.  # noqa: E501
        :type: str
        """
        if initial_balance is None:
            raise ValueError("Invalid value for `initial_balance`, must not be `None`")  # noqa: E501

        self._initial_balance = initial_balance

    @property
    def shares_dst(self):
        """Gets the shares_dst of this RedelegationEntry.  # noqa: E501


        :return: The shares_dst of this RedelegationEntry.  # noqa: E501
        :rtype: str
        """
        return self._shares_dst

    @shares_dst.setter
    def shares_dst(self, shares_dst):
        """Sets the shares_dst of this RedelegationEntry.


        :param shares_dst: The shares_dst of this RedelegationEntry.  # noqa: E501
        :type: str
        """
        if shares_dst is None:
            raise ValueError("Invalid value for `shares_dst`, must not be `None`")  # noqa: E501

        self._shares_dst = shares_dst

    @property
    def balance(self):
        """Gets the balance of this RedelegationEntry.  # noqa: E501


        :return: The balance of this RedelegationEntry.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this RedelegationEntry.


        :param balance: The balance of this RedelegationEntry.  # noqa: E501
        :type: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedelegationEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedelegationEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
