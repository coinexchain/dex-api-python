# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SigningInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_height': 'str',
        'index_offset': 'str',
        'jailed_until': 'str',
        'missed_blocks_counter': 'str'
    }

    attribute_map = {
        'start_height': 'start_height',
        'index_offset': 'index_offset',
        'jailed_until': 'jailed_until',
        'missed_blocks_counter': 'missed_blocks_counter'
    }

    def __init__(self, start_height=None, index_offset=None, jailed_until=None, missed_blocks_counter=None):  # noqa: E501
        """SigningInfo - a model defined in Swagger"""  # noqa: E501

        self._start_height = None
        self._index_offset = None
        self._jailed_until = None
        self._missed_blocks_counter = None
        self.discriminator = None

        self.start_height = start_height
        self.index_offset = index_offset
        self.jailed_until = jailed_until
        self.missed_blocks_counter = missed_blocks_counter

    @property
    def start_height(self):
        """Gets the start_height of this SigningInfo.  # noqa: E501


        :return: The start_height of this SigningInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_height

    @start_height.setter
    def start_height(self, start_height):
        """Sets the start_height of this SigningInfo.


        :param start_height: The start_height of this SigningInfo.  # noqa: E501
        :type: str
        """
        if start_height is None:
            raise ValueError("Invalid value for `start_height`, must not be `None`")  # noqa: E501

        self._start_height = start_height

    @property
    def index_offset(self):
        """Gets the index_offset of this SigningInfo.  # noqa: E501


        :return: The index_offset of this SigningInfo.  # noqa: E501
        :rtype: str
        """
        return self._index_offset

    @index_offset.setter
    def index_offset(self, index_offset):
        """Sets the index_offset of this SigningInfo.


        :param index_offset: The index_offset of this SigningInfo.  # noqa: E501
        :type: str
        """
        if index_offset is None:
            raise ValueError("Invalid value for `index_offset`, must not be `None`")  # noqa: E501

        self._index_offset = index_offset

    @property
    def jailed_until(self):
        """Gets the jailed_until of this SigningInfo.  # noqa: E501


        :return: The jailed_until of this SigningInfo.  # noqa: E501
        :rtype: str
        """
        return self._jailed_until

    @jailed_until.setter
    def jailed_until(self, jailed_until):
        """Sets the jailed_until of this SigningInfo.


        :param jailed_until: The jailed_until of this SigningInfo.  # noqa: E501
        :type: str
        """
        if jailed_until is None:
            raise ValueError("Invalid value for `jailed_until`, must not be `None`")  # noqa: E501

        self._jailed_until = jailed_until

    @property
    def missed_blocks_counter(self):
        """Gets the missed_blocks_counter of this SigningInfo.  # noqa: E501


        :return: The missed_blocks_counter of this SigningInfo.  # noqa: E501
        :rtype: str
        """
        return self._missed_blocks_counter

    @missed_blocks_counter.setter
    def missed_blocks_counter(self, missed_blocks_counter):
        """Sets the missed_blocks_counter of this SigningInfo.


        :param missed_blocks_counter: The missed_blocks_counter of this SigningInfo.  # noqa: E501
        :type: str
        """
        if missed_blocks_counter is None:
            raise ValueError("Invalid value for `missed_blocks_counter`, must not be `None`")  # noqa: E501

        self._missed_blocks_counter = missed_blocks_counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SigningInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SigningInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
