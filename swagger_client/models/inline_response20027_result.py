# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20027Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'threshold': 'str',
        'veto': 'str',
        'governance_penalty': 'str'
    }

    attribute_map = {
        'threshold': 'threshold',
        'veto': 'veto',
        'governance_penalty': 'governance_penalty'
    }

    def __init__(self, threshold=None, veto=None, governance_penalty=None):  # noqa: E501
        """InlineResponse20027Result - a model defined in Swagger"""  # noqa: E501

        self._threshold = None
        self._veto = None
        self._governance_penalty = None
        self.discriminator = None

        if threshold is not None:
            self.threshold = threshold
        if veto is not None:
            self.veto = veto
        if governance_penalty is not None:
            self.governance_penalty = governance_penalty

    @property
    def threshold(self):
        """Gets the threshold of this InlineResponse20027Result.  # noqa: E501


        :return: The threshold of this InlineResponse20027Result.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this InlineResponse20027Result.


        :param threshold: The threshold of this InlineResponse20027Result.  # noqa: E501
        :type: str
        """

        self._threshold = threshold

    @property
    def veto(self):
        """Gets the veto of this InlineResponse20027Result.  # noqa: E501


        :return: The veto of this InlineResponse20027Result.  # noqa: E501
        :rtype: str
        """
        return self._veto

    @veto.setter
    def veto(self, veto):
        """Sets the veto of this InlineResponse20027Result.


        :param veto: The veto of this InlineResponse20027Result.  # noqa: E501
        :type: str
        """

        self._veto = veto

    @property
    def governance_penalty(self):
        """Gets the governance_penalty of this InlineResponse20027Result.  # noqa: E501


        :return: The governance_penalty of this InlineResponse20027Result.  # noqa: E501
        :rtype: str
        """
        return self._governance_penalty

    @governance_penalty.setter
    def governance_penalty(self, governance_penalty):
        """Sets the governance_penalty of this InlineResponse20027Result.


        :param governance_penalty: The governance_penalty of this InlineResponse20027Result.  # noqa: E501
        :type: str
        """

        self._governance_penalty = governance_penalty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
