# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Validator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator_address': 'ValidatorAddress',
        'consensus_pubkey': 'str',
        'jailed': 'bool',
        'status': 'int',
        'tokens': 'str',
        'delegator_shares': 'str',
        'description': 'ValidatorDescription',
        'unbonding_height': 'str',
        'unbonding_time': 'str',
        'commission': 'ValidatorCommission',
        'min_self_delegation': 'str'
    }

    attribute_map = {
        'operator_address': 'operator_address',
        'consensus_pubkey': 'consensus_pubkey',
        'jailed': 'jailed',
        'status': 'status',
        'tokens': 'tokens',
        'delegator_shares': 'delegator_shares',
        'description': 'description',
        'unbonding_height': 'unbonding_height',
        'unbonding_time': 'unbonding_time',
        'commission': 'commission',
        'min_self_delegation': 'min_self_delegation'
    }

    def __init__(self, operator_address=None, consensus_pubkey=None, jailed=None, status=None, tokens=None, delegator_shares=None, description=None, unbonding_height=None, unbonding_time=None, commission=None, min_self_delegation=None):  # noqa: E501
        """Validator - a model defined in Swagger"""  # noqa: E501

        self._operator_address = None
        self._consensus_pubkey = None
        self._jailed = None
        self._status = None
        self._tokens = None
        self._delegator_shares = None
        self._description = None
        self._unbonding_height = None
        self._unbonding_time = None
        self._commission = None
        self._min_self_delegation = None
        self.discriminator = None

        self.operator_address = operator_address
        self.consensus_pubkey = consensus_pubkey
        self.jailed = jailed
        self.status = status
        self.tokens = tokens
        self.delegator_shares = delegator_shares
        self.description = description
        self.unbonding_height = unbonding_height
        self.unbonding_time = unbonding_time
        self.commission = commission
        self.min_self_delegation = min_self_delegation

    @property
    def operator_address(self):
        """Gets the operator_address of this Validator.  # noqa: E501


        :return: The operator_address of this Validator.  # noqa: E501
        :rtype: ValidatorAddress
        """
        return self._operator_address

    @operator_address.setter
    def operator_address(self, operator_address):
        """Sets the operator_address of this Validator.


        :param operator_address: The operator_address of this Validator.  # noqa: E501
        :type: ValidatorAddress
        """
        if operator_address is None:
            raise ValueError("Invalid value for `operator_address`, must not be `None`")  # noqa: E501

        self._operator_address = operator_address

    @property
    def consensus_pubkey(self):
        """Gets the consensus_pubkey of this Validator.  # noqa: E501


        :return: The consensus_pubkey of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._consensus_pubkey

    @consensus_pubkey.setter
    def consensus_pubkey(self, consensus_pubkey):
        """Sets the consensus_pubkey of this Validator.


        :param consensus_pubkey: The consensus_pubkey of this Validator.  # noqa: E501
        :type: str
        """
        if consensus_pubkey is None:
            raise ValueError("Invalid value for `consensus_pubkey`, must not be `None`")  # noqa: E501

        self._consensus_pubkey = consensus_pubkey

    @property
    def jailed(self):
        """Gets the jailed of this Validator.  # noqa: E501


        :return: The jailed of this Validator.  # noqa: E501
        :rtype: bool
        """
        return self._jailed

    @jailed.setter
    def jailed(self, jailed):
        """Sets the jailed of this Validator.


        :param jailed: The jailed of this Validator.  # noqa: E501
        :type: bool
        """
        if jailed is None:
            raise ValueError("Invalid value for `jailed`, must not be `None`")  # noqa: E501

        self._jailed = jailed

    @property
    def status(self):
        """Gets the status of this Validator.  # noqa: E501


        :return: The status of this Validator.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Validator.


        :param status: The status of this Validator.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tokens(self):
        """Gets the tokens of this Validator.  # noqa: E501


        :return: The tokens of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this Validator.


        :param tokens: The tokens of this Validator.  # noqa: E501
        :type: str
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def delegator_shares(self):
        """Gets the delegator_shares of this Validator.  # noqa: E501


        :return: The delegator_shares of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._delegator_shares

    @delegator_shares.setter
    def delegator_shares(self, delegator_shares):
        """Sets the delegator_shares of this Validator.


        :param delegator_shares: The delegator_shares of this Validator.  # noqa: E501
        :type: str
        """
        if delegator_shares is None:
            raise ValueError("Invalid value for `delegator_shares`, must not be `None`")  # noqa: E501

        self._delegator_shares = delegator_shares

    @property
    def description(self):
        """Gets the description of this Validator.  # noqa: E501


        :return: The description of this Validator.  # noqa: E501
        :rtype: ValidatorDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Validator.


        :param description: The description of this Validator.  # noqa: E501
        :type: ValidatorDescription
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def unbonding_height(self):
        """Gets the unbonding_height of this Validator.  # noqa: E501


        :return: The unbonding_height of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._unbonding_height

    @unbonding_height.setter
    def unbonding_height(self, unbonding_height):
        """Sets the unbonding_height of this Validator.


        :param unbonding_height: The unbonding_height of this Validator.  # noqa: E501
        :type: str
        """
        if unbonding_height is None:
            raise ValueError("Invalid value for `unbonding_height`, must not be `None`")  # noqa: E501

        self._unbonding_height = unbonding_height

    @property
    def unbonding_time(self):
        """Gets the unbonding_time of this Validator.  # noqa: E501


        :return: The unbonding_time of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._unbonding_time

    @unbonding_time.setter
    def unbonding_time(self, unbonding_time):
        """Sets the unbonding_time of this Validator.


        :param unbonding_time: The unbonding_time of this Validator.  # noqa: E501
        :type: str
        """
        if unbonding_time is None:
            raise ValueError("Invalid value for `unbonding_time`, must not be `None`")  # noqa: E501

        self._unbonding_time = unbonding_time

    @property
    def commission(self):
        """Gets the commission of this Validator.  # noqa: E501


        :return: The commission of this Validator.  # noqa: E501
        :rtype: ValidatorCommission
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Validator.


        :param commission: The commission of this Validator.  # noqa: E501
        :type: ValidatorCommission
        """
        if commission is None:
            raise ValueError("Invalid value for `commission`, must not be `None`")  # noqa: E501

        self._commission = commission

    @property
    def min_self_delegation(self):
        """Gets the min_self_delegation of this Validator.  # noqa: E501


        :return: The min_self_delegation of this Validator.  # noqa: E501
        :rtype: str
        """
        return self._min_self_delegation

    @min_self_delegation.setter
    def min_self_delegation(self, min_self_delegation):
        """Sets the min_self_delegation of this Validator.


        :param min_self_delegation: The min_self_delegation of this Validator.  # noqa: E501
        :type: str
        """
        if min_self_delegation is None:
            raise ValueError("Invalid value for `min_self_delegation`, must not be `None`")  # noqa: E501

        self._min_self_delegation = min_self_delegation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Validator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Validator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
