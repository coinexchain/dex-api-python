# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deposit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'list[Coin]',
        'proposal_id': 'str',
        'depositor': 'Address'
    }

    attribute_map = {
        'amount': 'amount',
        'proposal_id': 'proposal_id',
        'depositor': 'depositor'
    }

    def __init__(self, amount=None, proposal_id=None, depositor=None):  # noqa: E501
        """Deposit - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._proposal_id = None
        self._depositor = None
        self.discriminator = None

        self.amount = amount
        self.proposal_id = proposal_id
        self.depositor = depositor

    @property
    def amount(self):
        """Gets the amount of this Deposit.  # noqa: E501


        :return: The amount of this Deposit.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Deposit.


        :param amount: The amount of this Deposit.  # noqa: E501
        :type: list[Coin]
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def proposal_id(self):
        """Gets the proposal_id of this Deposit.  # noqa: E501


        :return: The proposal_id of this Deposit.  # noqa: E501
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this Deposit.


        :param proposal_id: The proposal_id of this Deposit.  # noqa: E501
        :type: str
        """
        if proposal_id is None:
            raise ValueError("Invalid value for `proposal_id`, must not be `None`")  # noqa: E501

        self._proposal_id = proposal_id

    @property
    def depositor(self):
        """Gets the depositor of this Deposit.  # noqa: E501


        :return: The depositor of this Deposit.  # noqa: E501
        :rtype: Address
        """
        return self._depositor

    @depositor.setter
    def depositor(self, depositor):
        """Sets the depositor of this Deposit.


        :param depositor: The depositor of this Deposit.  # noqa: E501
        :type: Address
        """
        if depositor is None:
            raise ValueError("Invalid value for `depositor`, must not be `None`")  # noqa: E501

        self._depositor = depositor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deposit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deposit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
