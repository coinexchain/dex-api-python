# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BroadcastTxCommitResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'str',
        'txhash': 'Hash',
        'code': 'int',
        'data': 'str',
        'raw_log': 'str',
        'logs': 'list[BroadcastTxCommitResultLogs]',
        'info': 'str',
        'gas_wanted': 'str',
        'gas_used': 'str',
        'events': 'list[BroadcastTxCommitResultEvents]',
        'codespace': 'str',
        'tx': 'object',
        'timestamp': 'str'
    }

    attribute_map = {
        'height': 'height',
        'txhash': 'txhash',
        'code': 'code',
        'data': 'data',
        'raw_log': 'raw_log',
        'logs': 'logs',
        'info': 'info',
        'gas_wanted': 'gas_wanted',
        'gas_used': 'gas_used',
        'events': 'events',
        'codespace': 'codespace',
        'tx': 'tx',
        'timestamp': 'timestamp'
    }

    def __init__(self, height=None, txhash=None, code=None, data=None, raw_log=None, logs=None, info=None, gas_wanted=None, gas_used=None, events=None, codespace=None, tx=None, timestamp=None):  # noqa: E501
        """BroadcastTxCommitResult - a model defined in Swagger"""  # noqa: E501

        self._height = None
        self._txhash = None
        self._code = None
        self._data = None
        self._raw_log = None
        self._logs = None
        self._info = None
        self._gas_wanted = None
        self._gas_used = None
        self._events = None
        self._codespace = None
        self._tx = None
        self._timestamp = None
        self.discriminator = None

        if height is not None:
            self.height = height
        if txhash is not None:
            self.txhash = txhash
        if code is not None:
            self.code = code
        if data is not None:
            self.data = data
        if raw_log is not None:
            self.raw_log = raw_log
        if logs is not None:
            self.logs = logs
        if info is not None:
            self.info = info
        if gas_wanted is not None:
            self.gas_wanted = gas_wanted
        if gas_used is not None:
            self.gas_used = gas_used
        if events is not None:
            self.events = events
        if codespace is not None:
            self.codespace = codespace
        if tx is not None:
            self.tx = tx
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def height(self):
        """Gets the height of this BroadcastTxCommitResult.  # noqa: E501


        :return: The height of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BroadcastTxCommitResult.


        :param height: The height of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def txhash(self):
        """Gets the txhash of this BroadcastTxCommitResult.  # noqa: E501


        :return: The txhash of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: Hash
        """
        return self._txhash

    @txhash.setter
    def txhash(self, txhash):
        """Sets the txhash of this BroadcastTxCommitResult.


        :param txhash: The txhash of this BroadcastTxCommitResult.  # noqa: E501
        :type: Hash
        """

        self._txhash = txhash

    @property
    def code(self):
        """Gets the code of this BroadcastTxCommitResult.  # noqa: E501


        :return: The code of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BroadcastTxCommitResult.


        :param code: The code of this BroadcastTxCommitResult.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def data(self):
        """Gets the data of this BroadcastTxCommitResult.  # noqa: E501


        :return: The data of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BroadcastTxCommitResult.


        :param data: The data of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def raw_log(self):
        """Gets the raw_log of this BroadcastTxCommitResult.  # noqa: E501


        :return: The raw_log of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._raw_log

    @raw_log.setter
    def raw_log(self, raw_log):
        """Sets the raw_log of this BroadcastTxCommitResult.


        :param raw_log: The raw_log of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._raw_log = raw_log

    @property
    def logs(self):
        """Gets the logs of this BroadcastTxCommitResult.  # noqa: E501


        :return: The logs of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: list[BroadcastTxCommitResultLogs]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this BroadcastTxCommitResult.


        :param logs: The logs of this BroadcastTxCommitResult.  # noqa: E501
        :type: list[BroadcastTxCommitResultLogs]
        """

        self._logs = logs

    @property
    def info(self):
        """Gets the info of this BroadcastTxCommitResult.  # noqa: E501


        :return: The info of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this BroadcastTxCommitResult.


        :param info: The info of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def gas_wanted(self):
        """Gets the gas_wanted of this BroadcastTxCommitResult.  # noqa: E501


        :return: The gas_wanted of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._gas_wanted

    @gas_wanted.setter
    def gas_wanted(self, gas_wanted):
        """Sets the gas_wanted of this BroadcastTxCommitResult.


        :param gas_wanted: The gas_wanted of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._gas_wanted = gas_wanted

    @property
    def gas_used(self):
        """Gets the gas_used of this BroadcastTxCommitResult.  # noqa: E501


        :return: The gas_used of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._gas_used

    @gas_used.setter
    def gas_used(self, gas_used):
        """Sets the gas_used of this BroadcastTxCommitResult.


        :param gas_used: The gas_used of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._gas_used = gas_used

    @property
    def events(self):
        """Gets the events of this BroadcastTxCommitResult.  # noqa: E501


        :return: The events of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: list[BroadcastTxCommitResultEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this BroadcastTxCommitResult.


        :param events: The events of this BroadcastTxCommitResult.  # noqa: E501
        :type: list[BroadcastTxCommitResultEvents]
        """

        self._events = events

    @property
    def codespace(self):
        """Gets the codespace of this BroadcastTxCommitResult.  # noqa: E501


        :return: The codespace of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._codespace

    @codespace.setter
    def codespace(self, codespace):
        """Sets the codespace of this BroadcastTxCommitResult.


        :param codespace: The codespace of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._codespace = codespace

    @property
    def tx(self):
        """Gets the tx of this BroadcastTxCommitResult.  # noqa: E501


        :return: The tx of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: object
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this BroadcastTxCommitResult.


        :param tx: The tx of this BroadcastTxCommitResult.  # noqa: E501
        :type: object
        """

        self._tx = tx

    @property
    def timestamp(self):
        """Gets the timestamp of this BroadcastTxCommitResult.  # noqa: E501


        :return: The timestamp of this BroadcastTxCommitResult.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BroadcastTxCommitResult.


        :param timestamp: The timestamp of this BroadcastTxCommitResult.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BroadcastTxCommitResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BroadcastTxCommitResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
