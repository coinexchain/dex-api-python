# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DistributionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def donate_to_community_pool(self, acc_address, amount, **kwargs):  # noqa: E501
        """Donate to the community pool  # noqa: E501

        Donate some amount of cet to the community pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.donate_to_community_pool(acc_address, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acc_address: Account address of the user (required)
        :param Amount amount: Amount of cet to donate (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.donate_to_community_pool_with_http_info(acc_address, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.donate_to_community_pool_with_http_info(acc_address, amount, **kwargs)  # noqa: E501
            return data

    def donate_to_community_pool_with_http_info(self, acc_address, amount, **kwargs):  # noqa: E501
        """Donate to the community pool  # noqa: E501

        Donate some amount of cet to the community pool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.donate_to_community_pool_with_http_info(acc_address, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str acc_address: Account address of the user (required)
        :param Amount amount: Amount of cet to donate (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acc_address', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method donate_to_community_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acc_address' is set
        if ('acc_address' not in params or
                params['acc_address'] is None):
            raise ValueError("Missing the required parameter `acc_address` when calling `donate_to_community_pool`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `donate_to_community_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'acc_address' in params:
            path_params['accAddress'] = params['acc_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'amount' in params:
            body_params = params['amount']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/{accAddress}/donates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_rewards(self, delegator_addr, **kwargs):  # noqa: E501
        """Get the total rewards balance from all delegations  # noqa: E501

        Get the sum of all the rewards earned by delegations by a single delegator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rewards(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_rewards_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_rewards_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def get_all_rewards_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Get the total rewards balance from all delegations  # noqa: E501

        Get the sum of all the rewards earned by delegations by a single delegator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_rewards_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `get_all_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/rewards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_community_pool(self, **kwargs):  # noqa: E501
        """Community pool parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_pool(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_community_pool_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_community_pool_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_community_pool_with_http_info(self, **kwargs):  # noqa: E501
        """Community pool parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_community_pool_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_community_pool" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/community_pool', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_info(self, validator_addr, **kwargs):  # noqa: E501
        """Validator distribution information  # noqa: E501

        Query the distribution information of a single validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_info_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_info_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def get_distribution_info_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Validator distribution information  # noqa: E501

        Query the distribution information of a single validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_info_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `get_distribution_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/validators/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distribution_params(self, **kwargs):  # noqa: E501
        """Fee distribution parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_params(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_distribution_params_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_distribution_params_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_distribution_params_with_http_info(self, **kwargs):  # noqa: E501
        """Fee distribution parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_distribution_params_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distribution_params" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outstanding_rewards(self, validator_addr, **kwargs):  # noqa: E501
        """Fee distribution outstanding rewards of a single validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outstanding_rewards(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outstanding_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outstanding_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def get_outstanding_rewards_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Fee distribution outstanding rewards of a single validator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outstanding_rewards_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outstanding_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `get_outstanding_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/validators/{validatorAddr}/outstanding_rewards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reward_by_validator(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query a delegation reward  # noqa: E501

        Query a single delegation reward by a delegator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reward_by_validator(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reward_by_validator_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reward_by_validator_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
            return data

    def get_reward_by_validator_with_http_info(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Query a delegation reward  # noqa: E501

        Query a single delegation reward by a delegator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reward_by_validator_with_http_info(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reward_by_validator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `get_reward_by_validator`")  # noqa: E501
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `get_reward_by_validator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_validator_rewards(self, validator_addr, **kwargs):  # noqa: E501
        """Commission and self-delegation rewards of a single validator  # noqa: E501

        Query the commission and self-delegation rewards of validator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validator_rewards(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_validator_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_validator_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def get_validator_rewards_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Commission and self-delegation rewards of a single validator  # noqa: E501

        Query the commission and self-delegation rewards of validator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_validator_rewards_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_validator_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `get_validator_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/validators/{validatorAddr}/rewards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_withdraw_address(self, delegator_addr, **kwargs):  # noqa: E501
        """Get the rewards withdrawal address  # noqa: E501

        Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_withdraw_address(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_withdraw_address_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.get_withdraw_address_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def get_withdraw_address_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Get the rewards withdrawal address  # noqa: E501

        Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_withdraw_address_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_withdraw_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `get_withdraw_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/withdraw_address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_withdraw_address(self, delegator_addr, **kwargs):  # noqa: E501
        """Replace the rewards withdrawal address  # noqa: E501

        Replace the delegations' rewards withdrawal address for a new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_withdraw_address(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param WithdrawRequestBody2 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_withdraw_address_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.set_withdraw_address_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def set_withdraw_address_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Replace the rewards withdrawal address  # noqa: E501

        Replace the delegations' rewards withdrawal address for a new one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_withdraw_address_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param WithdrawRequestBody2 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'withdraw_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_withdraw_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `set_withdraw_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'withdraw_request_body' in params:
            body_params = params['withdraw_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/withdraw_address', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdraw_all_rewards(self, delegator_addr, **kwargs):  # noqa: E501
        """Withdraw all the delegator's delegation rewards  # noqa: E501

        Withdraw all the delegator's delegation rewards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_all_rewards(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param WithdrawRequestBody withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdraw_all_rewards_with_http_info(delegator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.withdraw_all_rewards_with_http_info(delegator_addr, **kwargs)  # noqa: E501
            return data

    def withdraw_all_rewards_with_http_info(self, delegator_addr, **kwargs):  # noqa: E501
        """Withdraw all the delegator's delegation rewards  # noqa: E501

        Withdraw all the delegator's delegation rewards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_all_rewards_with_http_info(delegator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param WithdrawRequestBody withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'withdraw_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdraw_all_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `withdraw_all_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'withdraw_request_body' in params:
            body_params = params['withdraw_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/rewards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdraw_all_validator_rewards(self, validator_addr, **kwargs):  # noqa: E501
        """Withdraw the validator's rewards  # noqa: E501

        Withdraw the validator's self-delegation and commissions rewards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_all_validator_rewards(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :param WithdrawRequestBody3 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdraw_all_validator_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.withdraw_all_validator_rewards_with_http_info(validator_addr, **kwargs)  # noqa: E501
            return data

    def withdraw_all_validator_rewards_with_http_info(self, validator_addr, **kwargs):  # noqa: E501
        """Withdraw the validator's rewards  # noqa: E501

        Withdraw the validator's self-delegation and commissions rewards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_all_validator_rewards_with_http_info(validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :param WithdrawRequestBody3 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr', 'withdraw_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdraw_all_validator_rewards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `withdraw_all_validator_rewards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'withdraw_request_body' in params:
            body_params = params['withdraw_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/validators/{validatorAddr}/rewards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def withdraw_rewards_by_validator(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Withdraw a delegation reward  # noqa: E501

        Withdraw a delegator's delegation reward from a single validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_rewards_by_validator(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :param WithdrawRequestBody1 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.withdraw_rewards_by_validator_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
        else:
            (data) = self.withdraw_rewards_by_validator_with_http_info(delegator_addr, validator_addr, **kwargs)  # noqa: E501
            return data

    def withdraw_rewards_by_validator_with_http_info(self, delegator_addr, validator_addr, **kwargs):  # noqa: E501
        """Withdraw a delegation reward  # noqa: E501

        Withdraw a delegator's delegation reward from a single validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.withdraw_rewards_by_validator_with_http_info(delegator_addr, validator_addr, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str delegator_addr: Bech32 AccAddress of Delegator (required)
        :param str validator_addr: Bech32 OperatorAddress of validator (required)
        :param WithdrawRequestBody1 withdraw_request_body:
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delegator_addr', 'validator_addr', 'withdraw_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method withdraw_rewards_by_validator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delegator_addr' is set
        if ('delegator_addr' not in params or
                params['delegator_addr'] is None):
            raise ValueError("Missing the required parameter `delegator_addr` when calling `withdraw_rewards_by_validator`")  # noqa: E501
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `withdraw_rewards_by_validator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'delegator_addr' in params:
            path_params['delegatorAddr'] = params['delegator_addr']  # noqa: E501
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'withdraw_request_body' in params:
            body_params = params['withdraw_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
