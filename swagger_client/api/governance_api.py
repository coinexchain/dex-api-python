# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GovernanceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deposit_to_proposal(self, proposal_id, post_deposit_body, **kwargs):  # noqa: E501
        """Deposit tokens to a proposal  # noqa: E501

        Send transaction to deposit tokens to a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deposit_to_proposal(proposal_id, post_deposit_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param PostDepositBody post_deposit_body:  (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deposit_to_proposal_with_http_info(proposal_id, post_deposit_body, **kwargs)  # noqa: E501
        else:
            (data) = self.deposit_to_proposal_with_http_info(proposal_id, post_deposit_body, **kwargs)  # noqa: E501
            return data

    def deposit_to_proposal_with_http_info(self, proposal_id, post_deposit_body, **kwargs):  # noqa: E501
        """Deposit tokens to a proposal  # noqa: E501

        Send transaction to deposit tokens to a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deposit_to_proposal_with_http_info(proposal_id, post_deposit_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param PostDepositBody post_deposit_body:  (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id', 'post_deposit_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deposit_to_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `deposit_to_proposal`")  # noqa: E501
        # verify the required parameter 'post_deposit_body' is set
        if ('post_deposit_body' not in params or
                params['post_deposit_body'] is None):
            raise ValueError("Missing the required parameter `post_deposit_body` when calling `deposit_to_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_deposit_body' in params:
            body_params = params['post_deposit_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/deposits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deposit_by_addr(self, proposal_id, depositor, **kwargs):  # noqa: E501
        """Query deposit  # noqa: E501

        Query deposit by proposalId and depositor address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposit_by_addr(proposal_id, depositor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param str depositor: Bech32 depositor address (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deposit_by_addr_with_http_info(proposal_id, depositor, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deposit_by_addr_with_http_info(proposal_id, depositor, **kwargs)  # noqa: E501
            return data

    def get_deposit_by_addr_with_http_info(self, proposal_id, depositor, **kwargs):  # noqa: E501
        """Query deposit  # noqa: E501

        Query deposit by proposalId and depositor address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposit_by_addr_with_http_info(proposal_id, depositor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param str depositor: Bech32 depositor address (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id', 'depositor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deposit_by_addr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_deposit_by_addr`")  # noqa: E501
        # verify the required parameter 'depositor' is set
        if ('depositor' not in params or
                params['depositor'] is None):
            raise ValueError("Missing the required parameter `depositor` when calling `get_deposit_by_addr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501
        if 'depositor' in params:
            path_params['depositor'] = params['depositor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/deposits/{depositor}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deposit_parameters(self, **kwargs):  # noqa: E501
        """Query governance deposit parameters  # noqa: E501

        Query governance deposit parameters. The max_deposit_period units are in nanoseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposit_parameters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deposit_parameters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_deposit_parameters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_deposit_parameters_with_http_info(self, **kwargs):  # noqa: E501
        """Query governance deposit parameters  # noqa: E501

        Query governance deposit parameters. The max_deposit_period units are in nanoseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposit_parameters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deposit_parameters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/parameters/deposit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deposits(self, proposal_id, **kwargs):  # noqa: E501
        """Query deposits  # noqa: E501

        Query deposits by proposalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposits(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deposits_with_http_info(proposal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deposits_with_http_info(proposal_id, **kwargs)  # noqa: E501
            return data

    def get_deposits_with_http_info(self, proposal_id, **kwargs):  # noqa: E501
        """Query deposits  # noqa: E501

        Query deposits by proposalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deposits_with_http_info(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deposits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_deposits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/deposits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_proposal_by_id(self, proposal_id, **kwargs):  # noqa: E501
        """Query a proposal  # noqa: E501

        Query a proposal by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposal_by_id(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_proposal_by_id_with_http_info(proposal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_proposal_by_id_with_http_info(proposal_id, **kwargs)  # noqa: E501
            return data

    def get_proposal_by_id_with_http_info(self, proposal_id, **kwargs):  # noqa: E501
        """Query a proposal  # noqa: E501

        Query a proposal by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposal_by_id_with_http_info(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_proposal_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_proposal_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_proposals(self, **kwargs):  # noqa: E501
        """Query proposals  # noqa: E501

        Query proposals information with parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str voter: voter address
        :param str depositor: depositor address
        :param str status: proposal status, valid values can be `\"deposit_period\"`, `\"voting_period\"`, `\"passed\"`, `\"rejected\"`
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_proposals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_proposals_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_proposals_with_http_info(self, **kwargs):  # noqa: E501
        """Query proposals  # noqa: E501

        Query proposals information with parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str voter: voter address
        :param str depositor: depositor address
        :param str status: proposal status, valid values can be `\"deposit_period\"`, `\"voting_period\"`, `\"passed\"`, `\"rejected\"`
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['voter', 'depositor', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_proposals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'voter' in params:
            query_params.append(('voter', params['voter']))  # noqa: E501
        if 'depositor' in params:
            query_params.append(('depositor', params['depositor']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_proposer(self, proposal_id, **kwargs):  # noqa: E501
        """Query proposer  # noqa: E501

        Query for the proposer for a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposer(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_proposer_with_http_info(proposal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_proposer_with_http_info(proposal_id, **kwargs)  # noqa: E501
            return data

    def get_proposer_with_http_info(self, proposal_id, **kwargs):  # noqa: E501
        """Query proposer  # noqa: E501

        Query for the proposer for a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proposer_with_http_info(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_proposer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_proposer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/proposer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tally(self, proposal_id, **kwargs):  # noqa: E501
        """Get a proposal's tally result at the current time  # noqa: E501

        Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tally(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tally_with_http_info(proposal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tally_with_http_info(proposal_id, **kwargs)  # noqa: E501
            return data

    def get_tally_with_http_info(self, proposal_id, **kwargs):  # noqa: E501
        """Get a proposal's tally result at the current time  # noqa: E501

        Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tally_with_http_info(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tally" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_tally`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/tally', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tallying_parameters(self, **kwargs):  # noqa: E501
        """Query governance tally parameters  # noqa: E501

        Query governance tally parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tallying_parameters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tallying_parameters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tallying_parameters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tallying_parameters_with_http_info(self, **kwargs):  # noqa: E501
        """Query governance tally parameters  # noqa: E501

        Query governance tally parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tallying_parameters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tallying_parameters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/parameters/tallying', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_voter_by_addr(self, proposal_id, voter, **kwargs):  # noqa: E501
        """Query vote  # noqa: E501

        Query vote information by proposal Id and voter address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voter_by_addr(proposal_id, voter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param str voter: Bech32 voter address (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_voter_by_addr_with_http_info(proposal_id, voter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_voter_by_addr_with_http_info(proposal_id, voter, **kwargs)  # noqa: E501
            return data

    def get_voter_by_addr_with_http_info(self, proposal_id, voter, **kwargs):  # noqa: E501
        """Query vote  # noqa: E501

        Query vote information by proposal Id and voter address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voter_by_addr_with_http_info(proposal_id, voter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param str voter: Bech32 voter address (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id', 'voter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voter_by_addr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_voter_by_addr`")  # noqa: E501
        # verify the required parameter 'voter' is set
        if ('voter' not in params or
                params['voter'] is None):
            raise ValueError("Missing the required parameter `voter` when calling `get_voter_by_addr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501
        if 'voter' in params:
            path_params['voter'] = params['voter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/votes/{voter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_voters(self, proposal_id, **kwargs):  # noqa: E501
        """Query voters  # noqa: E501

        Query voters information by proposalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voters(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_voters_with_http_info(proposal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_voters_with_http_info(proposal_id, **kwargs)  # noqa: E501
            return data

    def get_voters_with_http_info(self, proposal_id, **kwargs):  # noqa: E501
        """Query voters  # noqa: E501

        Query voters information by proposalId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voters_with_http_info(proposal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `get_voters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/votes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_voting_parameters(self, **kwargs):  # noqa: E501
        """Query governance voting parameters  # noqa: E501

        Query governance voting parameters. The voting_period units are in nanoseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voting_parameters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_voting_parameters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_voting_parameters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_voting_parameters_with_http_info(self, **kwargs):  # noqa: E501
        """Query governance voting parameters  # noqa: E501

        Query governance voting parameters. The voting_period units are in nanoseconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voting_parameters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voting_parameters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/parameters/voting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_community_pool_spend_proposal(self, post_proposal_body, **kwargs):  # noqa: E501
        """Generate a community pool spend proposal transaction  # noqa: E501

        Generate a community pool spend proposal transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_community_pool_spend_proposal(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody2 post_proposal_body: The community pool spend proposal body contains coin amount to be spent (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_community_pool_spend_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_community_pool_spend_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
            return data

    def submit_community_pool_spend_proposal_with_http_info(self, post_proposal_body, **kwargs):  # noqa: E501
        """Generate a community pool spend proposal transaction  # noqa: E501

        Generate a community pool spend proposal transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_community_pool_spend_proposal_with_http_info(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody2 post_proposal_body: The community pool spend proposal body contains coin amount to be spent (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_proposal_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_community_pool_spend_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_proposal_body' is set
        if ('post_proposal_body' not in params or
                params['post_proposal_body'] is None):
            raise ValueError("Missing the required parameter `post_proposal_body` when calling `submit_community_pool_spend_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_proposal_body' in params:
            body_params = params['post_proposal_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/community_pool_spend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_parameter_change_proposal(self, post_proposal_body, **kwargs):  # noqa: E501
        """Generate a parameter change proposal transaction  # noqa: E501

        Generate a parameter change proposal transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_parameter_change_proposal(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody1 post_proposal_body: The parameter change proposal body that contains all parameter changes (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_parameter_change_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_parameter_change_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
            return data

    def submit_parameter_change_proposal_with_http_info(self, post_proposal_body, **kwargs):  # noqa: E501
        """Generate a parameter change proposal transaction  # noqa: E501

        Generate a parameter change proposal transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_parameter_change_proposal_with_http_info(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody1 post_proposal_body: The parameter change proposal body that contains all parameter changes (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_proposal_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_parameter_change_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_proposal_body' is set
        if ('post_proposal_body' not in params or
                params['post_proposal_body'] is None):
            raise ValueError("Missing the required parameter `post_proposal_body` when calling `submit_parameter_change_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_proposal_body' in params:
            body_params = params['post_proposal_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/param_change', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_proposal(self, post_proposal_body, **kwargs):  # noqa: E501
        """Submit a proposal  # noqa: E501

        Send transaction to submit a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_proposal(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody post_proposal_body: valid value of `\"proposal_type\"` can be `\"text\"`, `\"parameter_change\"`, `\"software_upgrade\"` (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_proposal_with_http_info(post_proposal_body, **kwargs)  # noqa: E501
            return data

    def submit_proposal_with_http_info(self, post_proposal_body, **kwargs):  # noqa: E501
        """Submit a proposal  # noqa: E501

        Send transaction to submit a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_proposal_with_http_info(post_proposal_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostProposalBody post_proposal_body: valid value of `\"proposal_type\"` can be `\"text\"`, `\"parameter_change\"`, `\"software_upgrade\"` (required)
        :return: StdTx
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_proposal_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_proposal_body' is set
        if ('post_proposal_body' not in params or
                params['post_proposal_body'] is None):
            raise ValueError("Missing the required parameter `post_proposal_body` when calling `submit_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_proposal_body' in params:
            body_params = params['post_proposal_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StdTx',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vote_proposal(self, proposal_id, post_vote_body, **kwargs):  # noqa: E501
        """Vote a proposal  # noqa: E501

        Send transaction to vote a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vote_proposal(proposal_id, post_vote_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param PostVoteBody post_vote_body: valid value of `\"option\"` field can be `\"yes\"`, `\"no\"`, `\"no_with_veto\"` and `\"abstain\"` (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vote_proposal_with_http_info(proposal_id, post_vote_body, **kwargs)  # noqa: E501
        else:
            (data) = self.vote_proposal_with_http_info(proposal_id, post_vote_body, **kwargs)  # noqa: E501
            return data

    def vote_proposal_with_http_info(self, proposal_id, post_vote_body, **kwargs):  # noqa: E501
        """Vote a proposal  # noqa: E501

        Send transaction to vote a proposal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vote_proposal_with_http_info(proposal_id, post_vote_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str proposal_id: proposal id (required)
        :param PostVoteBody post_vote_body: valid value of `\"option\"` field can be `\"yes\"`, `\"no\"`, `\"no_with_veto\"` and `\"abstain\"` (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['proposal_id', 'post_vote_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vote_proposal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'proposal_id' is set
        if ('proposal_id' not in params or
                params['proposal_id'] is None):
            raise ValueError("Missing the required parameter `proposal_id` when calling `vote_proposal`")  # noqa: E501
        # verify the required parameter 'post_vote_body' is set
        if ('post_vote_body' not in params or
                params['post_vote_body'] is None):
            raise ValueError("Missing the required parameter `post_vote_body` when calling `vote_proposal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposal_id' in params:
            path_params['proposalId'] = params['proposal_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_vote_body' in params:
            body_params = params['post_vote_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/gov/proposals/{proposalId}/votes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
