# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateOrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'sender': 'Address',
        'trading_pair': 'str',
        'order_type': 'int',
        'price': 'str',
        'quantity': 'int',
        'side': 'int',
        'time_in_force': 'int',
        'feature_fee': 'int',
        'height': 'int',
        'frozen_fee': 'int',
        'freeze': 'int',
        'tx_hash': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'sender': 'sender',
        'trading_pair': 'trading_pair',
        'order_type': 'order_type',
        'price': 'price',
        'quantity': 'quantity',
        'side': 'side',
        'time_in_force': 'time_in_force',
        'feature_fee': 'feature_fee',
        'height': 'height',
        'frozen_fee': 'frozen_fee',
        'freeze': 'freeze',
        'tx_hash': 'tx_hash'
    }

    def __init__(self, order_id=None, sender=None, trading_pair=None, order_type=None, price=None, quantity=None, side=None, time_in_force=None, feature_fee=None, height=None, frozen_fee=None, freeze=None, tx_hash=None):  # noqa: E501
        """CreateOrderInfo - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._sender = None
        self._trading_pair = None
        self._order_type = None
        self._price = None
        self._quantity = None
        self._side = None
        self._time_in_force = None
        self._feature_fee = None
        self._height = None
        self._frozen_fee = None
        self._freeze = None
        self._tx_hash = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if sender is not None:
            self.sender = sender
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if order_type is not None:
            self.order_type = order_type
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if side is not None:
            self.side = side
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if feature_fee is not None:
            self.feature_fee = feature_fee
        if height is not None:
            self.height = height
        if frozen_fee is not None:
            self.frozen_fee = frozen_fee
        if freeze is not None:
            self.freeze = freeze
        if tx_hash is not None:
            self.tx_hash = tx_hash

    @property
    def order_id(self):
        """Gets the order_id of this CreateOrderInfo.  # noqa: E501


        :return: The order_id of this CreateOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CreateOrderInfo.


        :param order_id: The order_id of this CreateOrderInfo.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def sender(self):
        """Gets the sender of this CreateOrderInfo.  # noqa: E501


        :return: The sender of this CreateOrderInfo.  # noqa: E501
        :rtype: Address
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this CreateOrderInfo.


        :param sender: The sender of this CreateOrderInfo.  # noqa: E501
        :type: Address
        """

        self._sender = sender

    @property
    def trading_pair(self):
        """Gets the trading_pair of this CreateOrderInfo.  # noqa: E501


        :return: The trading_pair of this CreateOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this CreateOrderInfo.


        :param trading_pair: The trading_pair of this CreateOrderInfo.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def order_type(self):
        """Gets the order_type of this CreateOrderInfo.  # noqa: E501

        Limited value 2  # noqa: E501

        :return: The order_type of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this CreateOrderInfo.

        Limited value 2  # noqa: E501

        :param order_type: The order_type of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._order_type = order_type

    @property
    def price(self):
        """Gets the price of this CreateOrderInfo.  # noqa: E501


        :return: The price of this CreateOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CreateOrderInfo.


        :param price: The price of this CreateOrderInfo.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this CreateOrderInfo.  # noqa: E501


        :return: The quantity of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreateOrderInfo.


        :param quantity: The quantity of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this CreateOrderInfo.  # noqa: E501

        BUY:1/SELL:2  # noqa: E501

        :return: The side of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this CreateOrderInfo.

        BUY:1/SELL:2  # noqa: E501

        :param side: The side of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._side = side

    @property
    def time_in_force(self):
        """Gets the time_in_force of this CreateOrderInfo.  # noqa: E501

        GTE:3/IOC:4  # noqa: E501

        :return: The time_in_force of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this CreateOrderInfo.

        GTE:3/IOC:4  # noqa: E501

        :param time_in_force: The time_in_force of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._time_in_force = time_in_force

    @property
    def feature_fee(self):
        """Gets the feature_fee of this CreateOrderInfo.  # noqa: E501

        Order feature fee, sato.CET as the unit  # noqa: E501

        :return: The feature_fee of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._feature_fee

    @feature_fee.setter
    def feature_fee(self, feature_fee):
        """Sets the feature_fee of this CreateOrderInfo.

        Order feature fee, sato.CET as the unit  # noqa: E501

        :param feature_fee: The feature_fee of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._feature_fee = feature_fee

    @property
    def height(self):
        """Gets the height of this CreateOrderInfo.  # noqa: E501


        :return: The height of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CreateOrderInfo.


        :param height: The height of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def frozen_fee(self):
        """Gets the frozen_fee of this CreateOrderInfo.  # noqa: E501

        Order frozen fee, sato.CET as the unit  # noqa: E501

        :return: The frozen_fee of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._frozen_fee

    @frozen_fee.setter
    def frozen_fee(self, frozen_fee):
        """Sets the frozen_fee of this CreateOrderInfo.

        Order frozen fee, sato.CET as the unit  # noqa: E501

        :param frozen_fee: The frozen_fee of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._frozen_fee = frozen_fee

    @property
    def freeze(self):
        """Gets the freeze of this CreateOrderInfo.  # noqa: E501

        Freeze sato.CET amount  # noqa: E501

        :return: The freeze of this CreateOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this CreateOrderInfo.

        Freeze sato.CET amount  # noqa: E501

        :param freeze: The freeze of this CreateOrderInfo.  # noqa: E501
        :type: int
        """

        self._freeze = freeze

    @property
    def tx_hash(self):
        """Gets the tx_hash of this CreateOrderInfo.  # noqa: E501

        The tx hash  # noqa: E501

        :return: The tx_hash of this CreateOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this CreateOrderInfo.

        The tx hash  # noqa: E501

        :param tx_hash: The tx_hash of this CreateOrderInfo.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
