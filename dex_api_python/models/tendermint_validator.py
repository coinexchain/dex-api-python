# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TendermintValidator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'ValidatorAddress',
        'pub_key': 'str',
        'voting_power': 'str',
        'proposer_priority': 'str'
    }

    attribute_map = {
        'address': 'address',
        'pub_key': 'pub_key',
        'voting_power': 'voting_power',
        'proposer_priority': 'proposer_priority'
    }

    def __init__(self, address=None, pub_key=None, voting_power=None, proposer_priority=None):  # noqa: E501
        """TendermintValidator - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._pub_key = None
        self._voting_power = None
        self._proposer_priority = None
        self.discriminator = None

        self.address = address
        self.pub_key = pub_key
        self.voting_power = voting_power
        self.proposer_priority = proposer_priority

    @property
    def address(self):
        """Gets the address of this TendermintValidator.  # noqa: E501


        :return: The address of this TendermintValidator.  # noqa: E501
        :rtype: ValidatorAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TendermintValidator.


        :param address: The address of this TendermintValidator.  # noqa: E501
        :type: ValidatorAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def pub_key(self):
        """Gets the pub_key of this TendermintValidator.  # noqa: E501


        :return: The pub_key of this TendermintValidator.  # noqa: E501
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this TendermintValidator.


        :param pub_key: The pub_key of this TendermintValidator.  # noqa: E501
        :type: str
        """
        if pub_key is None:
            raise ValueError("Invalid value for `pub_key`, must not be `None`")  # noqa: E501

        self._pub_key = pub_key

    @property
    def voting_power(self):
        """Gets the voting_power of this TendermintValidator.  # noqa: E501


        :return: The voting_power of this TendermintValidator.  # noqa: E501
        :rtype: str
        """
        return self._voting_power

    @voting_power.setter
    def voting_power(self, voting_power):
        """Sets the voting_power of this TendermintValidator.


        :param voting_power: The voting_power of this TendermintValidator.  # noqa: E501
        :type: str
        """
        if voting_power is None:
            raise ValueError("Invalid value for `voting_power`, must not be `None`")  # noqa: E501

        self._voting_power = voting_power

    @property
    def proposer_priority(self):
        """Gets the proposer_priority of this TendermintValidator.  # noqa: E501


        :return: The proposer_priority of this TendermintValidator.  # noqa: E501
        :rtype: str
        """
        return self._proposer_priority

    @proposer_priority.setter
    def proposer_priority(self, proposer_priority):
        """Sets the proposer_priority of this TendermintValidator.


        :param proposer_priority: The proposer_priority of this TendermintValidator.  # noqa: E501
        :type: str
        """
        if proposer_priority is None:
            raise ValueError("Invalid value for `proposer_priority`, must not be `None`")  # noqa: E501

        self._proposer_priority = proposer_priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TendermintValidator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TendermintValidator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
