# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Unlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'Address',
        'unlocked': 'list[Coin]',
        'locked_coins': 'list[LockedCoin]',
        'frozen_coins': 'list[Coin]',
        'coins': 'list[Coin]',
        'height': 'int'
    }

    attribute_map = {
        'address': 'address',
        'unlocked': 'unlocked',
        'locked_coins': 'locked_coins',
        'frozen_coins': 'frozen_coins',
        'coins': 'coins',
        'height': 'height'
    }

    def __init__(self, address=None, unlocked=None, locked_coins=None, frozen_coins=None, coins=None, height=None):  # noqa: E501
        """Unlock - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._unlocked = None
        self._locked_coins = None
        self._frozen_coins = None
        self._coins = None
        self._height = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if unlocked is not None:
            self.unlocked = unlocked
        if locked_coins is not None:
            self.locked_coins = locked_coins
        if frozen_coins is not None:
            self.frozen_coins = frozen_coins
        if coins is not None:
            self.coins = coins
        if height is not None:
            self.height = height

    @property
    def address(self):
        """Gets the address of this Unlock.  # noqa: E501


        :return: The address of this Unlock.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Unlock.


        :param address: The address of this Unlock.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def unlocked(self):
        """Gets the unlocked of this Unlock.  # noqa: E501


        :return: The unlocked of this Unlock.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._unlocked

    @unlocked.setter
    def unlocked(self, unlocked):
        """Sets the unlocked of this Unlock.


        :param unlocked: The unlocked of this Unlock.  # noqa: E501
        :type: list[Coin]
        """

        self._unlocked = unlocked

    @property
    def locked_coins(self):
        """Gets the locked_coins of this Unlock.  # noqa: E501


        :return: The locked_coins of this Unlock.  # noqa: E501
        :rtype: list[LockedCoin]
        """
        return self._locked_coins

    @locked_coins.setter
    def locked_coins(self, locked_coins):
        """Sets the locked_coins of this Unlock.


        :param locked_coins: The locked_coins of this Unlock.  # noqa: E501
        :type: list[LockedCoin]
        """

        self._locked_coins = locked_coins

    @property
    def frozen_coins(self):
        """Gets the frozen_coins of this Unlock.  # noqa: E501


        :return: The frozen_coins of this Unlock.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._frozen_coins

    @frozen_coins.setter
    def frozen_coins(self, frozen_coins):
        """Sets the frozen_coins of this Unlock.


        :param frozen_coins: The frozen_coins of this Unlock.  # noqa: E501
        :type: list[Coin]
        """

        self._frozen_coins = frozen_coins

    @property
    def coins(self):
        """Gets the coins of this Unlock.  # noqa: E501


        :return: The coins of this Unlock.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._coins

    @coins.setter
    def coins(self, coins):
        """Sets the coins of this Unlock.


        :param coins: The coins of this Unlock.  # noqa: E501
        :type: list[Coin]
        """

        self._coins = coins

    @property
    def height(self):
        """Gets the height of this Unlock.  # noqa: E501


        :return: The height of this Unlock.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Unlock.


        :param height: The height of this Unlock.  # noqa: E501
        :type: int
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Unlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Unlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
