# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_type': 'int',
        'trading_pair': 'str',
        'price_precision': 'str',
        'price': 'str',
        'quantity': 'str',
        'side': 'int',
        'identify': 'int'
    }

    attribute_map = {
        'order_type': 'order_type',
        'trading_pair': 'trading_pair',
        'price_precision': 'price_precision',
        'price': 'price',
        'quantity': 'quantity',
        'side': 'side',
        'identify': 'identify'
    }

    def __init__(self, order_type=None, trading_pair=None, price_precision=None, price=None, quantity=None, side=None, identify=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._order_type = None
        self._trading_pair = None
        self._price_precision = None
        self._price = None
        self._quantity = None
        self._side = None
        self._identify = None
        self.discriminator = None

        self.order_type = order_type
        self.trading_pair = trading_pair
        if price_precision is not None:
            self.price_precision = price_precision
        self.price = price
        self.quantity = quantity
        self.side = side
        self.identify = identify

    @property
    def order_type(self):
        """Gets the order_type of this Order.  # noqa: E501

        The identify of the price limit : 2; (Currently, only price limit orders are supported)  # noqa: E501

        :return: The order_type of this Order.  # noqa: E501
        :rtype: int
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this Order.

        The identify of the price limit : 2; (Currently, only price limit orders are supported)  # noqa: E501

        :param order_type: The order_type of this Order.  # noqa: E501
        :type: int
        """
        if order_type is None:
            raise ValueError("Invalid value for `order_type`, must not be `None`")  # noqa: E501

        self._order_type = order_type

    @property
    def trading_pair(self):
        """Gets the trading_pair of this Order.  # noqa: E501


        :return: The trading_pair of this Order.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this Order.


        :param trading_pair: The trading_pair of this Order.  # noqa: E501
        :type: str
        """
        if trading_pair is None:
            raise ValueError("Invalid value for `trading_pair`, must not be `None`")  # noqa: E501

        self._trading_pair = trading_pair

    @property
    def price_precision(self):
        """Gets the price_precision of this Order.  # noqa: E501


        :return: The price_precision of this Order.  # noqa: E501
        :rtype: str
        """
        return self._price_precision

    @price_precision.setter
    def price_precision(self, price_precision):
        """Sets the price_precision of this Order.


        :param price_precision: The price_precision of this Order.  # noqa: E501
        :type: str
        """

        self._price_precision = price_precision

    @property
    def price(self):
        """Gets the price of this Order.  # noqa: E501


        :return: The price of this Order.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Order.


        :param price: The price of this Order.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Order.  # noqa: E501


        :return: The quantity of this Order.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Order.


        :param quantity: The quantity of this Order.  # noqa: E501
        :type: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def side(self):
        """Gets the side of this Order.  # noqa: E501

        The buying or selling direction of an order.(buy : 1; sell : 2)  # noqa: E501

        :return: The side of this Order.  # noqa: E501
        :rtype: int
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Order.

        The buying or selling direction of an order.(buy : 1; sell : 2)  # noqa: E501

        :param side: The side of this Order.  # noqa: E501
        :type: int
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def identify(self):
        """Gets the identify of this Order.  # noqa: E501

        A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.  # noqa: E501

        :return: The identify of this Order.  # noqa: E501
        :rtype: int
        """
        return self._identify

    @identify.setter
    def identify(self, identify):
        """Sets the identify of this Order.

        A transaction can contain multiple order creation messages, the identify field was added to the order creation message to give each order a unique ID. So the order ID consists of user address, user sequence, identify.  # noqa: E501

        :param identify: The identify of this Order.  # noqa: E501
        :type: int
        """
        if identify is None:
            raise ValueError("Invalid value for `identify`, must not be `None`")  # noqa: E501

        self._identify = identify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
