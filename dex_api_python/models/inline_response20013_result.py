# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20013Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'not_bonded_tokens': 'str',
        'bonded_tokens': 'str',
        'non_bondable_tokens': 'str',
        'total_supply': 'str',
        'bonded_ratio': 'str'
    }

    attribute_map = {
        'not_bonded_tokens': 'not_bonded_tokens',
        'bonded_tokens': 'bonded_tokens',
        'non_bondable_tokens': 'non_bondable_tokens',
        'total_supply': 'total_supply',
        'bonded_ratio': 'bonded_ratio'
    }

    def __init__(self, not_bonded_tokens=None, bonded_tokens=None, non_bondable_tokens=None, total_supply=None, bonded_ratio=None):  # noqa: E501
        """InlineResponse20013Result - a model defined in Swagger"""  # noqa: E501

        self._not_bonded_tokens = None
        self._bonded_tokens = None
        self._non_bondable_tokens = None
        self._total_supply = None
        self._bonded_ratio = None
        self.discriminator = None

        self.not_bonded_tokens = not_bonded_tokens
        self.bonded_tokens = bonded_tokens
        self.non_bondable_tokens = non_bondable_tokens
        self.total_supply = total_supply
        self.bonded_ratio = bonded_ratio

    @property
    def not_bonded_tokens(self):
        """Gets the not_bonded_tokens of this InlineResponse20013Result.  # noqa: E501


        :return: The not_bonded_tokens of this InlineResponse20013Result.  # noqa: E501
        :rtype: str
        """
        return self._not_bonded_tokens

    @not_bonded_tokens.setter
    def not_bonded_tokens(self, not_bonded_tokens):
        """Sets the not_bonded_tokens of this InlineResponse20013Result.


        :param not_bonded_tokens: The not_bonded_tokens of this InlineResponse20013Result.  # noqa: E501
        :type: str
        """
        if not_bonded_tokens is None:
            raise ValueError("Invalid value for `not_bonded_tokens`, must not be `None`")  # noqa: E501

        self._not_bonded_tokens = not_bonded_tokens

    @property
    def bonded_tokens(self):
        """Gets the bonded_tokens of this InlineResponse20013Result.  # noqa: E501


        :return: The bonded_tokens of this InlineResponse20013Result.  # noqa: E501
        :rtype: str
        """
        return self._bonded_tokens

    @bonded_tokens.setter
    def bonded_tokens(self, bonded_tokens):
        """Sets the bonded_tokens of this InlineResponse20013Result.


        :param bonded_tokens: The bonded_tokens of this InlineResponse20013Result.  # noqa: E501
        :type: str
        """
        if bonded_tokens is None:
            raise ValueError("Invalid value for `bonded_tokens`, must not be `None`")  # noqa: E501

        self._bonded_tokens = bonded_tokens

    @property
    def non_bondable_tokens(self):
        """Gets the non_bondable_tokens of this InlineResponse20013Result.  # noqa: E501


        :return: The non_bondable_tokens of this InlineResponse20013Result.  # noqa: E501
        :rtype: str
        """
        return self._non_bondable_tokens

    @non_bondable_tokens.setter
    def non_bondable_tokens(self, non_bondable_tokens):
        """Sets the non_bondable_tokens of this InlineResponse20013Result.


        :param non_bondable_tokens: The non_bondable_tokens of this InlineResponse20013Result.  # noqa: E501
        :type: str
        """
        if non_bondable_tokens is None:
            raise ValueError("Invalid value for `non_bondable_tokens`, must not be `None`")  # noqa: E501

        self._non_bondable_tokens = non_bondable_tokens

    @property
    def total_supply(self):
        """Gets the total_supply of this InlineResponse20013Result.  # noqa: E501


        :return: The total_supply of this InlineResponse20013Result.  # noqa: E501
        :rtype: str
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this InlineResponse20013Result.


        :param total_supply: The total_supply of this InlineResponse20013Result.  # noqa: E501
        :type: str
        """
        if total_supply is None:
            raise ValueError("Invalid value for `total_supply`, must not be `None`")  # noqa: E501

        self._total_supply = total_supply

    @property
    def bonded_ratio(self):
        """Gets the bonded_ratio of this InlineResponse20013Result.  # noqa: E501


        :return: The bonded_ratio of this InlineResponse20013Result.  # noqa: E501
        :rtype: str
        """
        return self._bonded_ratio

    @bonded_ratio.setter
    def bonded_ratio(self, bonded_ratio):
        """Sets the bonded_ratio of this InlineResponse20013Result.


        :param bonded_ratio: The bonded_ratio of this InlineResponse20013Result.  # noqa: E501
        :type: str
        """
        if bonded_ratio is None:
            raise ValueError("Invalid value for `bonded_ratio`, must not be `None`")  # noqa: E501

        self._bonded_ratio = bonded_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20013Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
