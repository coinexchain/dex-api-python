# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KeyOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address': 'str',
        'pub_key': 'str',
        'type': 'str',
        'seed': 'str'
    }

    attribute_map = {
        'name': 'name',
        'address': 'address',
        'pub_key': 'pub_key',
        'type': 'type',
        'seed': 'seed'
    }

    def __init__(self, name=None, address=None, pub_key=None, type=None, seed=None):  # noqa: E501
        """KeyOutput - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._address = None
        self._pub_key = None
        self._type = None
        self._seed = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if pub_key is not None:
            self.pub_key = pub_key
        if type is not None:
            self.type = type
        if seed is not None:
            self.seed = seed

    @property
    def name(self):
        """Gets the name of this KeyOutput.  # noqa: E501


        :return: The name of this KeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyOutput.


        :param name: The name of this KeyOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this KeyOutput.  # noqa: E501


        :return: The address of this KeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this KeyOutput.


        :param address: The address of this KeyOutput.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def pub_key(self):
        """Gets the pub_key of this KeyOutput.  # noqa: E501


        :return: The pub_key of this KeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._pub_key

    @pub_key.setter
    def pub_key(self, pub_key):
        """Sets the pub_key of this KeyOutput.


        :param pub_key: The pub_key of this KeyOutput.  # noqa: E501
        :type: str
        """

        self._pub_key = pub_key

    @property
    def type(self):
        """Gets the type of this KeyOutput.  # noqa: E501


        :return: The type of this KeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KeyOutput.


        :param type: The type of this KeyOutput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def seed(self):
        """Gets the seed of this KeyOutput.  # noqa: E501


        :return: The seed of this KeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this KeyOutput.


        :param seed: The seed of this KeyOutput.  # noqa: E501
        :type: str
        """

        self._seed = seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
