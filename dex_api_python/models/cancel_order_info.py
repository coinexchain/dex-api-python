# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CancelOrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'trading_pair': 'str',
        'height': 'int',
        'side': 'int',
        'price': 'str',
        'del_reason': 'str',
        'used_commission': 'int',
        'left_stock': 'int',
        'remain_amount': 'int',
        'deal_stock': 'int',
        'deal_money': 'int',
        'tx_hash': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'trading_pair': 'trading_pair',
        'height': 'height',
        'side': 'side',
        'price': 'price',
        'del_reason': 'del_reason',
        'used_commission': 'used_commission',
        'left_stock': 'left_stock',
        'remain_amount': 'remain_amount',
        'deal_stock': 'deal_stock',
        'deal_money': 'deal_money',
        'tx_hash': 'tx_hash'
    }

    def __init__(self, order_id=None, trading_pair=None, height=None, side=None, price=None, del_reason=None, used_commission=None, left_stock=None, remain_amount=None, deal_stock=None, deal_money=None, tx_hash=None):  # noqa: E501
        """CancelOrderInfo - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._trading_pair = None
        self._height = None
        self._side = None
        self._price = None
        self._del_reason = None
        self._used_commission = None
        self._left_stock = None
        self._remain_amount = None
        self._deal_stock = None
        self._deal_money = None
        self._tx_hash = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if trading_pair is not None:
            self.trading_pair = trading_pair
        if height is not None:
            self.height = height
        if side is not None:
            self.side = side
        if price is not None:
            self.price = price
        if del_reason is not None:
            self.del_reason = del_reason
        if used_commission is not None:
            self.used_commission = used_commission
        if left_stock is not None:
            self.left_stock = left_stock
        if remain_amount is not None:
            self.remain_amount = remain_amount
        if deal_stock is not None:
            self.deal_stock = deal_stock
        if deal_money is not None:
            self.deal_money = deal_money
        if tx_hash is not None:
            self.tx_hash = tx_hash

    @property
    def order_id(self):
        """Gets the order_id of this CancelOrderInfo.  # noqa: E501


        :return: The order_id of this CancelOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CancelOrderInfo.


        :param order_id: The order_id of this CancelOrderInfo.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def trading_pair(self):
        """Gets the trading_pair of this CancelOrderInfo.  # noqa: E501


        :return: The trading_pair of this CancelOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._trading_pair

    @trading_pair.setter
    def trading_pair(self, trading_pair):
        """Sets the trading_pair of this CancelOrderInfo.


        :param trading_pair: The trading_pair of this CancelOrderInfo.  # noqa: E501
        :type: str
        """

        self._trading_pair = trading_pair

    @property
    def height(self):
        """Gets the height of this CancelOrderInfo.  # noqa: E501


        :return: The height of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CancelOrderInfo.


        :param height: The height of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def side(self):
        """Gets the side of this CancelOrderInfo.  # noqa: E501

        BUY:1/SELL:2  # noqa: E501

        :return: The side of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this CancelOrderInfo.

        BUY:1/SELL:2  # noqa: E501

        :param side: The side of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._side = side

    @property
    def price(self):
        """Gets the price of this CancelOrderInfo.  # noqa: E501


        :return: The price of this CancelOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CancelOrderInfo.


        :param price: The price of this CancelOrderInfo.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def del_reason(self):
        """Gets the del_reason of this CancelOrderInfo.  # noqa: E501


        :return: The del_reason of this CancelOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._del_reason

    @del_reason.setter
    def del_reason(self, del_reason):
        """Sets the del_reason of this CancelOrderInfo.


        :param del_reason: The del_reason of this CancelOrderInfo.  # noqa: E501
        :type: str
        """

        self._del_reason = del_reason

    @property
    def used_commission(self):
        """Gets the used_commission of this CancelOrderInfo.  # noqa: E501

        Order used commission  # noqa: E501

        :return: The used_commission of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._used_commission

    @used_commission.setter
    def used_commission(self, used_commission):
        """Sets the used_commission of this CancelOrderInfo.

        Order used commission  # noqa: E501

        :param used_commission: The used_commission of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._used_commission = used_commission

    @property
    def left_stock(self):
        """Gets the left_stock of this CancelOrderInfo.  # noqa: E501


        :return: The left_stock of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._left_stock

    @left_stock.setter
    def left_stock(self, left_stock):
        """Sets the left_stock of this CancelOrderInfo.


        :param left_stock: The left_stock of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._left_stock = left_stock

    @property
    def remain_amount(self):
        """Gets the remain_amount of this CancelOrderInfo.  # noqa: E501


        :return: The remain_amount of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._remain_amount

    @remain_amount.setter
    def remain_amount(self, remain_amount):
        """Sets the remain_amount of this CancelOrderInfo.


        :param remain_amount: The remain_amount of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._remain_amount = remain_amount

    @property
    def deal_stock(self):
        """Gets the deal_stock of this CancelOrderInfo.  # noqa: E501


        :return: The deal_stock of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._deal_stock

    @deal_stock.setter
    def deal_stock(self, deal_stock):
        """Sets the deal_stock of this CancelOrderInfo.


        :param deal_stock: The deal_stock of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._deal_stock = deal_stock

    @property
    def deal_money(self):
        """Gets the deal_money of this CancelOrderInfo.  # noqa: E501


        :return: The deal_money of this CancelOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._deal_money

    @deal_money.setter
    def deal_money(self, deal_money):
        """Sets the deal_money of this CancelOrderInfo.


        :param deal_money: The deal_money of this CancelOrderInfo.  # noqa: E501
        :type: int
        """

        self._deal_money = deal_money

    @property
    def tx_hash(self):
        """Gets the tx_hash of this CancelOrderInfo.  # noqa: E501

        The tx hash  # noqa: E501

        :return: The tx_hash of this CancelOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this CancelOrderInfo.

        The tx hash  # noqa: E501

        :param tx_hash: The tx_hash of this CancelOrderInfo.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CancelOrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelOrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
