# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Unbonding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delegator': 'Address',
        'validator': 'Address',
        'amount': 'str',
        'completion_time': 'str',
        'tx_hash': 'str'
    }

    attribute_map = {
        'delegator': 'delegator',
        'validator': 'validator',
        'amount': 'amount',
        'completion_time': 'completion_time',
        'tx_hash': 'tx_hash'
    }

    def __init__(self, delegator=None, validator=None, amount=None, completion_time=None, tx_hash=None):  # noqa: E501
        """Unbonding - a model defined in Swagger"""  # noqa: E501

        self._delegator = None
        self._validator = None
        self._amount = None
        self._completion_time = None
        self._tx_hash = None
        self.discriminator = None

        if delegator is not None:
            self.delegator = delegator
        if validator is not None:
            self.validator = validator
        if amount is not None:
            self.amount = amount
        if completion_time is not None:
            self.completion_time = completion_time
        if tx_hash is not None:
            self.tx_hash = tx_hash

    @property
    def delegator(self):
        """Gets the delegator of this Unbonding.  # noqa: E501


        :return: The delegator of this Unbonding.  # noqa: E501
        :rtype: Address
        """
        return self._delegator

    @delegator.setter
    def delegator(self, delegator):
        """Sets the delegator of this Unbonding.


        :param delegator: The delegator of this Unbonding.  # noqa: E501
        :type: Address
        """

        self._delegator = delegator

    @property
    def validator(self):
        """Gets the validator of this Unbonding.  # noqa: E501


        :return: The validator of this Unbonding.  # noqa: E501
        :rtype: Address
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this Unbonding.


        :param validator: The validator of this Unbonding.  # noqa: E501
        :type: Address
        """

        self._validator = validator

    @property
    def amount(self):
        """Gets the amount of this Unbonding.  # noqa: E501


        :return: The amount of this Unbonding.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Unbonding.


        :param amount: The amount of this Unbonding.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def completion_time(self):
        """Gets the completion_time of this Unbonding.  # noqa: E501


        :return: The completion_time of this Unbonding.  # noqa: E501
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this Unbonding.


        :param completion_time: The completion_time of this Unbonding.  # noqa: E501
        :type: str
        """

        self._completion_time = completion_time

    @property
    def tx_hash(self):
        """Gets the tx_hash of this Unbonding.  # noqa: E501

        The tx hash  # noqa: E501

        :return: The tx_hash of this Unbonding.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this Unbonding.

        The tx hash  # noqa: E501

        :param tx_hash: The tx_hash of this Unbonding.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Unbonding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Unbonding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
