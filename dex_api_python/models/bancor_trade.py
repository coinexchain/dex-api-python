# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BancorTrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_req': 'BaseReq',
        'stock': 'str',
        'money': 'str',
        'amount': 'str',
        'is_buy': 'bool',
        'money_limit': 'str'
    }

    attribute_map = {
        'base_req': 'base_req',
        'stock': 'stock',
        'money': 'money',
        'amount': 'amount',
        'is_buy': 'is_buy',
        'money_limit': 'money_limit'
    }

    def __init__(self, base_req=None, stock=None, money=None, amount=None, is_buy=None, money_limit=None):  # noqa: E501
        """BancorTrade - a model defined in Swagger"""  # noqa: E501

        self._base_req = None
        self._stock = None
        self._money = None
        self._amount = None
        self._is_buy = None
        self._money_limit = None
        self.discriminator = None

        self.base_req = base_req
        self.stock = stock
        self.money = money
        self.amount = amount
        self.is_buy = is_buy
        self.money_limit = money_limit

    @property
    def base_req(self):
        """Gets the base_req of this BancorTrade.  # noqa: E501


        :return: The base_req of this BancorTrade.  # noqa: E501
        :rtype: BaseReq
        """
        return self._base_req

    @base_req.setter
    def base_req(self, base_req):
        """Sets the base_req of this BancorTrade.


        :param base_req: The base_req of this BancorTrade.  # noqa: E501
        :type: BaseReq
        """
        if base_req is None:
            raise ValueError("Invalid value for `base_req`, must not be `None`")  # noqa: E501

        self._base_req = base_req

    @property
    def stock(self):
        """Gets the stock of this BancorTrade.  # noqa: E501


        :return: The stock of this BancorTrade.  # noqa: E501
        :rtype: str
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this BancorTrade.


        :param stock: The stock of this BancorTrade.  # noqa: E501
        :type: str
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def money(self):
        """Gets the money of this BancorTrade.  # noqa: E501


        :return: The money of this BancorTrade.  # noqa: E501
        :rtype: str
        """
        return self._money

    @money.setter
    def money(self, money):
        """Sets the money of this BancorTrade.


        :param money: The money of this BancorTrade.  # noqa: E501
        :type: str
        """
        if money is None:
            raise ValueError("Invalid value for `money`, must not be `None`")  # noqa: E501

        self._money = money

    @property
    def amount(self):
        """Gets the amount of this BancorTrade.  # noqa: E501


        :return: The amount of this BancorTrade.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BancorTrade.


        :param amount: The amount of this BancorTrade.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def is_buy(self):
        """Gets the is_buy of this BancorTrade.  # noqa: E501


        :return: The is_buy of this BancorTrade.  # noqa: E501
        :rtype: bool
        """
        return self._is_buy

    @is_buy.setter
    def is_buy(self, is_buy):
        """Sets the is_buy of this BancorTrade.


        :param is_buy: The is_buy of this BancorTrade.  # noqa: E501
        :type: bool
        """
        if is_buy is None:
            raise ValueError("Invalid value for `is_buy`, must not be `None`")  # noqa: E501

        self._is_buy = is_buy

    @property
    def money_limit(self):
        """Gets the money_limit of this BancorTrade.  # noqa: E501


        :return: The money_limit of this BancorTrade.  # noqa: E501
        :rtype: str
        """
        return self._money_limit

    @money_limit.setter
    def money_limit(self, money_limit):
        """Sets the money_limit of this BancorTrade.


        :param money_limit: The money_limit of this BancorTrade.  # noqa: E501
        :type: str
        """
        if money_limit is None:
            raise ValueError("Invalid value for `money_limit`, must not be `None`")  # noqa: E501

        self._money_limit = money_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BancorTrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BancorTrade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
