# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Tickers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'new': 'str',
        'old': 'str'
    }

    attribute_map = {
        'market': 'market',
        'new': 'new',
        'old': 'old'
    }

    def __init__(self, market=None, new=None, old=None):  # noqa: E501
        """Tickers - a model defined in Swagger"""  # noqa: E501

        self._market = None
        self._new = None
        self._old = None
        self.discriminator = None

        if market is not None:
            self.market = market
        if new is not None:
            self.new = new
        if old is not None:
            self.old = old

    @property
    def market(self):
        """Gets the market of this Tickers.  # noqa: E501


        :return: The market of this Tickers.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Tickers.


        :param market: The market of this Tickers.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def new(self):
        """Gets the new of this Tickers.  # noqa: E501

        Newest price  # noqa: E501

        :return: The new of this Tickers.  # noqa: E501
        :rtype: str
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Tickers.

        Newest price  # noqa: E501

        :param new: The new of this Tickers.  # noqa: E501
        :type: str
        """

        self._new = new

    @property
    def old(self):
        """Gets the old of this Tickers.  # noqa: E501

        Old price one day ago  # noqa: E501

        :return: The old of this Tickers.  # noqa: E501
        :rtype: str
        """
        return self._old

    @old.setter
    def old(self, old):
        """Sets the old of this Tickers.

        Old price one day ago  # noqa: E501

        :param old: The old of this Tickers.  # noqa: E501
        :type: str
        """

        self._old = old

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tickers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tickers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
