# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostProposalBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_req': 'BaseReq',
        'title': 'str',
        'description': 'str',
        'proposal_type': 'str',
        'proposer': 'Address',
        'deposit': 'list[Coin]',
        'changes': 'list[ParamChange]'
    }

    attribute_map = {
        'base_req': 'base_req',
        'title': 'title',
        'description': 'description',
        'proposal_type': 'proposal_type',
        'proposer': 'proposer',
        'deposit': 'deposit',
        'changes': 'changes'
    }

    def __init__(self, base_req=None, title=None, description=None, proposal_type=None, proposer=None, deposit=None, changes=None):  # noqa: E501
        """PostProposalBody1 - a model defined in Swagger"""  # noqa: E501

        self._base_req = None
        self._title = None
        self._description = None
        self._proposal_type = None
        self._proposer = None
        self._deposit = None
        self._changes = None
        self.discriminator = None

        self.base_req = base_req
        self.title = title
        self.description = description
        self.proposal_type = proposal_type
        self.proposer = proposer
        self.deposit = deposit
        self.changes = changes

    @property
    def base_req(self):
        """Gets the base_req of this PostProposalBody1.  # noqa: E501


        :return: The base_req of this PostProposalBody1.  # noqa: E501
        :rtype: BaseReq
        """
        return self._base_req

    @base_req.setter
    def base_req(self, base_req):
        """Sets the base_req of this PostProposalBody1.


        :param base_req: The base_req of this PostProposalBody1.  # noqa: E501
        :type: BaseReq
        """
        if base_req is None:
            raise ValueError("Invalid value for `base_req`, must not be `None`")  # noqa: E501

        self._base_req = base_req

    @property
    def title(self):
        """Gets the title of this PostProposalBody1.  # noqa: E501


        :return: The title of this PostProposalBody1.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostProposalBody1.


        :param title: The title of this PostProposalBody1.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this PostProposalBody1.  # noqa: E501


        :return: The description of this PostProposalBody1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostProposalBody1.


        :param description: The description of this PostProposalBody1.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def proposal_type(self):
        """Gets the proposal_type of this PostProposalBody1.  # noqa: E501


        :return: The proposal_type of this PostProposalBody1.  # noqa: E501
        :rtype: str
        """
        return self._proposal_type

    @proposal_type.setter
    def proposal_type(self, proposal_type):
        """Sets the proposal_type of this PostProposalBody1.


        :param proposal_type: The proposal_type of this PostProposalBody1.  # noqa: E501
        :type: str
        """
        if proposal_type is None:
            raise ValueError("Invalid value for `proposal_type`, must not be `None`")  # noqa: E501

        self._proposal_type = proposal_type

    @property
    def proposer(self):
        """Gets the proposer of this PostProposalBody1.  # noqa: E501


        :return: The proposer of this PostProposalBody1.  # noqa: E501
        :rtype: Address
        """
        return self._proposer

    @proposer.setter
    def proposer(self, proposer):
        """Sets the proposer of this PostProposalBody1.


        :param proposer: The proposer of this PostProposalBody1.  # noqa: E501
        :type: Address
        """
        if proposer is None:
            raise ValueError("Invalid value for `proposer`, must not be `None`")  # noqa: E501

        self._proposer = proposer

    @property
    def deposit(self):
        """Gets the deposit of this PostProposalBody1.  # noqa: E501


        :return: The deposit of this PostProposalBody1.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this PostProposalBody1.


        :param deposit: The deposit of this PostProposalBody1.  # noqa: E501
        :type: list[Coin]
        """
        if deposit is None:
            raise ValueError("Invalid value for `deposit`, must not be `None`")  # noqa: E501

        self._deposit = deposit

    @property
    def changes(self):
        """Gets the changes of this PostProposalBody1.  # noqa: E501


        :return: The changes of this PostProposalBody1.  # noqa: E501
        :rtype: list[ParamChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this PostProposalBody1.


        :param changes: The changes of this PostProposalBody1.  # noqa: E501
        :type: list[ParamChange]
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")  # noqa: E501

        self._changes = changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostProposalBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostProposalBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
