# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20036ResultPlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_height': 'str',
        'end_height': 'str',
        'reward_per_block': 'str',
        'total_incentive': 'str'
    }

    attribute_map = {
        'start_height': 'start_height',
        'end_height': 'end_height',
        'reward_per_block': 'reward_per_block',
        'total_incentive': 'total_incentive'
    }

    def __init__(self, start_height=None, end_height=None, reward_per_block=None, total_incentive=None):  # noqa: E501
        """InlineResponse20036ResultPlans - a model defined in Swagger"""  # noqa: E501

        self._start_height = None
        self._end_height = None
        self._reward_per_block = None
        self._total_incentive = None
        self.discriminator = None

        if start_height is not None:
            self.start_height = start_height
        if end_height is not None:
            self.end_height = end_height
        if reward_per_block is not None:
            self.reward_per_block = reward_per_block
        if total_incentive is not None:
            self.total_incentive = total_incentive

    @property
    def start_height(self):
        """Gets the start_height of this InlineResponse20036ResultPlans.  # noqa: E501


        :return: The start_height of this InlineResponse20036ResultPlans.  # noqa: E501
        :rtype: str
        """
        return self._start_height

    @start_height.setter
    def start_height(self, start_height):
        """Sets the start_height of this InlineResponse20036ResultPlans.


        :param start_height: The start_height of this InlineResponse20036ResultPlans.  # noqa: E501
        :type: str
        """

        self._start_height = start_height

    @property
    def end_height(self):
        """Gets the end_height of this InlineResponse20036ResultPlans.  # noqa: E501


        :return: The end_height of this InlineResponse20036ResultPlans.  # noqa: E501
        :rtype: str
        """
        return self._end_height

    @end_height.setter
    def end_height(self, end_height):
        """Sets the end_height of this InlineResponse20036ResultPlans.


        :param end_height: The end_height of this InlineResponse20036ResultPlans.  # noqa: E501
        :type: str
        """

        self._end_height = end_height

    @property
    def reward_per_block(self):
        """Gets the reward_per_block of this InlineResponse20036ResultPlans.  # noqa: E501


        :return: The reward_per_block of this InlineResponse20036ResultPlans.  # noqa: E501
        :rtype: str
        """
        return self._reward_per_block

    @reward_per_block.setter
    def reward_per_block(self, reward_per_block):
        """Sets the reward_per_block of this InlineResponse20036ResultPlans.


        :param reward_per_block: The reward_per_block of this InlineResponse20036ResultPlans.  # noqa: E501
        :type: str
        """

        self._reward_per_block = reward_per_block

    @property
    def total_incentive(self):
        """Gets the total_incentive of this InlineResponse20036ResultPlans.  # noqa: E501


        :return: The total_incentive of this InlineResponse20036ResultPlans.  # noqa: E501
        :rtype: str
        """
        return self._total_incentive

    @total_incentive.setter
    def total_incentive(self, total_incentive):
        """Sets the total_incentive of this InlineResponse20036ResultPlans.


        :param total_incentive: The total_incentive of this InlineResponse20036ResultPlans.  # noqa: E501
        :type: str
        """

        self._total_incentive = total_incentive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036ResultPlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036ResultPlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
