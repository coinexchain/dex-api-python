# coding: utf-8

"""
    CET-Lite for CoinEx Chain

    A REST interface for state queries, transaction generation and broadcasting.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dex_api_python.api_client import ApiClient


class SlashingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_signing_info(self, validator_pub_key, **kwargs):  # noqa: E501
        """Get sign info of given validator  # noqa: E501

        Get sign info of given validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signing_info(validator_pub_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_pub_key: Bech32 validator public key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_signing_info_with_http_info(validator_pub_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_signing_info_with_http_info(validator_pub_key, **kwargs)  # noqa: E501
            return data

    def get_signing_info_with_http_info(self, validator_pub_key, **kwargs):  # noqa: E501
        """Get sign info of given validator  # noqa: E501

        Get sign info of given validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signing_info_with_http_info(validator_pub_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_pub_key: Bech32 validator public key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_pub_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_signing_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_pub_key' is set
        if ('validator_pub_key' not in params or
                params['validator_pub_key'] is None):
            raise ValueError("Missing the required parameter `validator_pub_key` when calling `get_signing_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_pub_key' in params:
            path_params['validatorPubKey'] = params['validator_pub_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/slashing/validators/{validatorPubKey}/signing_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_signing_infos(self, page, limit, **kwargs):  # noqa: E501
        """Get sign info of given all validators  # noqa: E501

        Get sign info of all validators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signing_infos(page, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number (required)
        :param int limit: Maximum number of items per page (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_signing_infos_with_http_info(page, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_signing_infos_with_http_info(page, limit, **kwargs)  # noqa: E501
            return data

    def get_signing_infos_with_http_info(self, page, limit, **kwargs):  # noqa: E501
        """Get sign info of given all validators  # noqa: E501

        Get sign info of all validators  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_signing_infos_with_http_info(page, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number (required)
        :param int limit: Maximum number of items per page (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_signing_infos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_signing_infos`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_signing_infos`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/slashing/signing_infos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slashing_params(self, **kwargs):  # noqa: E501
        """Get the current slashing parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_slashing_params(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_slashing_params_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_slashing_params_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_slashing_params_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current slashing parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_slashing_params_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slashing_params" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/slashing/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unjail_validator(self, validator_addr, unjail_body, **kwargs):  # noqa: E501
        """Unjail a jailed validator  # noqa: E501

        Send transaction to unjail a jailed validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unjail_validator(validator_addr, unjail_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 validator address (required)
        :param UnjailBody unjail_body:  (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unjail_validator_with_http_info(validator_addr, unjail_body, **kwargs)  # noqa: E501
        else:
            (data) = self.unjail_validator_with_http_info(validator_addr, unjail_body, **kwargs)  # noqa: E501
            return data

    def unjail_validator_with_http_info(self, validator_addr, unjail_body, **kwargs):  # noqa: E501
        """Unjail a jailed validator  # noqa: E501

        Send transaction to unjail a jailed validator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unjail_validator_with_http_info(validator_addr, unjail_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str validator_addr: Bech32 validator address (required)
        :param UnjailBody unjail_body:  (required)
        :return: BroadcastTxCommitResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validator_addr', 'unjail_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unjail_validator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'validator_addr' is set
        if ('validator_addr' not in params or
                params['validator_addr'] is None):
            raise ValueError("Missing the required parameter `validator_addr` when calling `unjail_validator`")  # noqa: E501
        # verify the required parameter 'unjail_body' is set
        if ('unjail_body' not in params or
                params['unjail_body'] is None):
            raise ValueError("Missing the required parameter `unjail_body` when calling `unjail_validator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'validator_addr' in params:
            path_params['validatorAddr'] = params['validator_addr']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unjail_body' in params:
            body_params = params['unjail_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/slashing/validators/{validatorAddr}/unjail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxCommitResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
